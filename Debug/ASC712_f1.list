
ASC712_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005250  08005250  00015250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005664  08005664  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005664  08005664  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800566c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  08005848  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005848  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f05  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018af  00000000  00000000  0002610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  000279c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  00028090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a5  00000000  00000000  00028668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089d4  00000000  00000000  0004080d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086669  00000000  00000000  000491e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf84a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  000cf89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005238 	.word	0x08005238

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005238 	.word	0x08005238

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <MX_ADC1_Init+0xc8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000aba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000acc:	481f      	ldr	r0, [pc, #124]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000ace:	f000 fb79 	bl	80011c4 <HAL_ADC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000ad8:	f000 f9c7 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4817      	ldr	r0, [pc, #92]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000aee:	f000 fc41 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000af8:	f000 f9b7 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000b06:	f000 fc35 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f9ab 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000b1e:	f000 fc29 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000b28:	f000 f99f 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_ADC1_Init+0xc4>)
 8000b36:	f000 fc1d 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000b40:	f000 f993 	bl	8000e6a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200001f8 	.word	0x200001f8
 8000b50:	40012400 	.word	0x40012400

08000b54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <MX_ADC2_Init+0xe0>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 5;
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b94:	2205      	movs	r2, #5
 8000b96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b98:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000b9a:	f000 fb13 	bl	80011c4 <HAL_ADC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC2_Init+0x54>
  {
    Error_Handler();
 8000ba4:	f000 f961 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000bba:	f000 fbdb 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000bc4:	f000 f951 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000bd2:	f000 fbcf 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f945 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000be0:	2303      	movs	r3, #3
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000bea:	f000 fbc3 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000bf4:	f000 f939 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000c02:	f000 fbb7 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000c0c:	f000 f92d 	bl	8000e6a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c10:	2305      	movs	r3, #5
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_ADC2_Init+0xdc>)
 8000c1a:	f000 fbab 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000c24:	f000 f921 	bl	8000e6a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000228 	.word	0x20000228
 8000c34:	40012800 	.word	0x40012800

08000c38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <HAL_ADC_MspInit+0xe8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d122      	bne.n	8000c9e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4619      	mov	r1, r3
 8000c96:	4824      	ldr	r0, [pc, #144]	; (8000d28 <HAL_ADC_MspInit+0xf0>)
 8000c98:	f000 fe90 	bl	80019bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c9c:	e03c      	b.n	8000d18 <HAL_ADC_MspInit+0xe0>
  else if(adcHandle->Instance==ADC2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <HAL_ADC_MspInit+0xf4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d137      	bne.n	8000d18 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_ADC_MspInit+0xec>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cf0:	23f0      	movs	r3, #240	; 0xf0
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480a      	ldr	r0, [pc, #40]	; (8000d28 <HAL_ADC_MspInit+0xf0>)
 8000d00:	f000 fe5c 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4619      	mov	r1, r3
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <HAL_ADC_MspInit+0xf8>)
 8000d14:	f000 fe52 	bl	80019bc <HAL_GPIO_Init>
}
 8000d18:	bf00      	nop
 8000d1a:	3730      	adds	r7, #48	; 0x30
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40012400 	.word	0x40012400
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40012800 	.word	0x40012800
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d40:	f043 0320 	orr.w	r3, r3, #32
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <MX_GPIO_Init+0x58>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 f9b4 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f80c 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff ffca 	bl	8000d34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000da0:	f7ff fe72 	bl	8000a88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000da4:	f7ff fed6 	bl	8000b54 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000da8:	4801      	ldr	r0, [pc, #4]	; (8000db0 <main+0x20>)
 8000daa:	f000 fc77 	bl	800169c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  survey_adc1_channel_IN0;
 8000dae:	e7fe      	b.n	8000dae <main+0x1e>
 8000db0:	200001f8 	.word	0x200001f8

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fd24 	bl	8002810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ff5a 	bl	8001cc4 <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e16:	f000 f828 	bl	8000e6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f9c6 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e42:	f000 f812 	bl	8000e6a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e46:	2302      	movs	r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fb3c 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e5e:	f000 f804 	bl	8000e6a <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6e:	b672      	cpsid	i
}
 8000e70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f935 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
	return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <_kill>:

int _kill(int pid, int sig)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f3e:	f001 fc3d 	bl	80027bc <__errno>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2216      	movs	r2, #22
 8000f46:	601a      	str	r2, [r3, #0]
	return -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_exit>:

void _exit (int status)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe7 	bl	8000f34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f66:	e7fe      	b.n	8000f66 <_exit+0x12>

08000f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
	}

return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
	}
	return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001000:	605a      	str	r2, [r3, #4]
	return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f001 fba6 	bl	80027bc <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20005000 	.word	0x20005000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000258 	.word	0x20000258
 80010a4:	20000270 	.word	0x20000270

080010a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010da:	f7ff ffe5 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f001 fb73 	bl	80027c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff fe55 	bl	8000d90 <main>
  bx lr
 80010e6:	4770      	bx	lr
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80010f0:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 80010f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80010f8:	20000270 	.word	0x20000270

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x28>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fc1f 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff feaa 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fc29 	bl	80019a2 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fbff 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000008 	.word	0x20000008
 80011ac:	2000025c 	.word	0x2000025c

080011b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	2000025c 	.word	0x2000025c

080011c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0be      	b.n	8001364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fd18 	bl	8000c38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fa05 	bl	8001618 <ADC_ConversionStop_Disable>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8099 	bne.w	8001352 <HAL_ADC_Init+0x18e>
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 8095 	bne.w	8001352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001230:	f023 0302 	bic.w	r3, r3, #2
 8001234:	f043 0202 	orr.w	r2, r3, #2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800124c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4313      	orrs	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0xa2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_ADC_Init+0xa8>
 8001266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126a:	e000      	b.n	800126e <HAL_ADC_Init+0xaa>
 800126c:	2300      	movs	r3, #0
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d119      	bne.n	80012b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d109      	bne.n	8001298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	3b01      	subs	r3, #1
 800128a:	035a      	lsls	r2, r3, #13
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e00b      	b.n	80012b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_ADC_Init+0x1a8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e0:	d003      	beq.n	80012ea <HAL_ADC_Init+0x126>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d104      	bne.n	80012f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	051b      	lsls	r3, r3, #20
 80012f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	430a      	orrs	r2, r1
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_ADC_Init+0x1ac>)
 8001310:	4013      	ands	r3, r2
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800132e:	e018      	b.n	8001362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f023 0312 	bic.w	r3, r3, #18
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001350:	e007      	b.n	8001362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	ffe1f7fd 	.word	0xffe1f7fd
 8001370:	ff1f0efe 	.word	0xff1f0efe

08001374 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e0dc      	b.n	800154e <HAL_ADC_ConfigChannel+0x1da>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d81c      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b05      	subs	r3, #5
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	4019      	ands	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	fa00 f203 	lsl.w	r2, r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
 80013dc:	e03c      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d81c      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	; 0x23
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	4019      	ands	r1, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b23      	subs	r3, #35	; 0x23
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	e01b      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b41      	subs	r3, #65	; 0x41
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	4019      	ands	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b41      	subs	r3, #65	; 0x41
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	d91c      	bls.n	800149a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3b1e      	subs	r3, #30
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	e019      	b.n	80014ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6919      	ldr	r1, [r3, #16]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	2207      	movs	r2, #7
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4019      	ands	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6898      	ldr	r0, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d132      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_ADC_ConfigChannel+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d125      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d126      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001504:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d11a      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_ADC_ConfigChannel+0x1e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_ADC_ConfigChannel+0x1ec>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1b2>
 8001532:	e007      	b.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40012400 	.word	0x40012400
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d040      	beq.n	8001604 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <ADC_Enable+0xac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <ADC_Enable+0xb0>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a0:	e002      	b.n	80015a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f9      	bne.n	80015a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ae:	f7ff fdff 	bl	80011b0 <HAL_GetTick>
 80015b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b4:	e01f      	b.n	80015f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015b6:	f7ff fdfb 	bl	80011b0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d918      	bls.n	80015f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d011      	beq.n	80015f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e007      	b.n	8001606 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d1d8      	bne.n	80015b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d12e      	bne.n	8001690 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001642:	f7ff fdb5 	bl	80011b0 <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001648:	e01b      	b.n	8001682 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164a:	f7ff fdb1 	bl	80011b0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d914      	bls.n	8001682 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10d      	bne.n	8001682 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e007      	b.n	8001692 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d0dc      	beq.n	800164a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADCEx_Calibration_Start+0x1e>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e095      	b.n	80017e6 <HAL_ADCEx_Calibration_Start+0x14a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa8 	bl	8001618 <ADC_ConversionStop_Disable>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8084 	bne.w	80017dc <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016dc:	f023 0302 	bic.w	r3, r3, #2
 80016e0:	f043 0202 	orr.w	r2, r3, #2
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016e8:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_ADCEx_Calibration_Start+0x154>)
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	2002      	movs	r0, #2
 80016ee:	f000 ffa5 	bl	800263c <HAL_RCCEx_GetPeriphCLKFreq>
 80016f2:	4603      	mov	r3, r0
 80016f4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016f8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016fa:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff2a 	bl	8001564 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0208 	orr.w	r2, r2, #8
 800171e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001720:	f7ff fd46 	bl	80011b0 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001726:	e01b      	b.n	8001760 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001728:	f7ff fd42 	bl	80011b0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b0a      	cmp	r3, #10
 8001734:	d914      	bls.n	8001760 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f023 0312 	bic.w	r3, r3, #18
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e042      	b.n	80017e6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1dc      	bne.n	8001728 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0204 	orr.w	r2, r2, #4
 800177c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800177e:	f7ff fd17 	bl	80011b0 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001784:	e01b      	b.n	80017be <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001786:	f7ff fd13 	bl	80011b0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b0a      	cmp	r3, #10
 8001792:	d914      	bls.n	80017be <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f023 0312 	bic.w	r3, r3, #18
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e013      	b.n	80017e6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1dc      	bne.n	8001786 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff49 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff5e 	bl	800183c <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffb0 	bl	8001910 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e169      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8158 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a9a      	ldr	r2, [pc, #616]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4a98      	ldr	r2, [pc, #608]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a96      	ldr	r2, [pc, #600]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a94      	ldr	r2, [pc, #592]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a92      	ldr	r2, [pc, #584]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a92      	ldr	r2, [pc, #584]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a79      	ldr	r2, [pc, #484]	; (8001c70 <HAL_GPIO_Init+0x2b4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3f      	ldr	r2, [pc, #252]	; (8001c80 <HAL_GPIO_Init+0x2c4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bba:	492f      	ldr	r1, [pc, #188]	; (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	492c      	ldr	r1, [pc, #176]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4928      	ldr	r1, [pc, #160]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	491e      	ldr	r1, [pc, #120]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4918      	ldr	r1, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4914      	ldr	r1, [pc, #80]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d021      	beq.n	8001c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e021      	b.n	8001c9e <HAL_GPIO_Init+0x2e2>
 8001c5a:	bf00      	nop
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	10310000 	.word	0x10310000
 8001c64:	10220000 	.word	0x10220000
 8001c68:	10210000 	.word	0x10210000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	10110000 	.word	0x10110000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40011400 	.word	0x40011400
 8001c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4909      	ldr	r1, [pc, #36]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f47f ae8e 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	; 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e272      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8087 	beq.w	8001df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d00c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d112      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d10b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d06c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x12c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d168      	bne.n	8001df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e24c      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x76>
 8001d2c:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b78      	ldr	r3, [pc, #480]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a77      	ldr	r2, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0xbc>
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a71      	ldr	r2, [pc, #452]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa06 	bl	80011b0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fa02 	bl	80011b0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e200      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe4>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f9f2 	bl	80011b0 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f9ee 	bl	80011b0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1ec      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x10c>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c0      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4939      	ldr	r1, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f9a7 	bl	80011b0 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff f9a3 	bl	80011b0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1a1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f986 	bl	80011b0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f982 	bl	80011b0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e180      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f966 	bl	80011b0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f962 	bl	80011b0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e160      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fac4 	bl	8002494 <RCC_Delay>
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7ff f94c 	bl	80011b0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff f948 	bl	80011b0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d908      	bls.n	8001f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e146      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42420000 	.word	0x42420000
 8001f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e9      	bne.n	8001f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a6 	beq.w	80020a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a87      	ldr	r2, [pc, #540]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b82      	ldr	r3, [pc, #520]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7e      	ldr	r2, [pc, #504]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f909 	bl	80011b0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7ff f905 	bl	80011b0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	; 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e103      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 8001fde:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a69      	ldr	r2, [pc, #420]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a66      	ldr	r2, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x356>
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a60      	ldr	r2, [pc, #384]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	4b5e      	ldr	r3, [pc, #376]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b58      	ldr	r3, [pc, #352]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff f8b9 	bl	80011b0 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff f8b5 	bl	80011b0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0b1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x37e>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff f8a3 	bl	80011b0 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f89f 	bl	80011b0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e09b      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d061      	beq.n	800217c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d146      	bne.n	800214e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f873 	bl	80011b0 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff f86f 	bl	80011b0 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e06d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4921      	ldr	r1, [pc, #132]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	430b      	orrs	r3, r1
 800211a:	491b      	ldr	r1, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff f843 	bl	80011b0 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7ff f83f 	bl	80011b0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e03d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x46a>
 800214c:	e035      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff f82c 	bl	80011b0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff f828 	bl	80011b0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e026      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x498>
 800217a:	e01e      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e019      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x500>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d0      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b67      	ldr	r3, [pc, #412]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4965      	ldr	r1, [pc, #404]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d040      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e073      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4936      	ldr	r1, [pc, #216]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe ff7a 	bl	80011b0 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe ff76 	bl	80011b0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e053      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d210      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fed8 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	08005270 	.word	0x08005270
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b490      	push	{r4, r7}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_GetSysClockFreq+0xac>)
 80023a4:	1d3c      	adds	r4, r7, #4
 80023a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023ac:	f240 2301 	movw	r3, #513	; 0x201
 80023b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x40>
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x46>
 80023da:	e02b      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	e02b      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	0c9b      	lsrs	r3, r3, #18
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0c5b      	lsrs	r3, r3, #17
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	3328      	adds	r3, #40	; 0x28
 800240a:	443b      	add	r3, r7
 800240c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	623b      	str	r3, [r7, #32]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	6a3b      	ldr	r3, [r7, #32]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc90      	pop	{r4, r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	08005250 	.word	0x08005250
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	003d0900 	.word	0x003d0900

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_RCC_GetHCLKFreq+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000000 	.word	0x20000000

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff fff2 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08005280 	.word	0x08005280

08002494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <RCC_Delay+0x34>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <RCC_Delay+0x38>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0a5b      	lsrs	r3, r3, #9
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b0:	bf00      	nop
  }
  while (Delay --);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f9      	bne.n	80024b0 <RCC_Delay+0x1c>
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000000 	.word	0x20000000
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d07d      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7fe fe3e 	bl	80011b0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	e008      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fe3a 	bl	80011b0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e06d      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d027      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fe09 	bl	80011b0 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fe05 	bl	80011b0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e036      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	42420440 	.word	0x42420440

0800263c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b08d      	sub	sp, #52	; 0x34
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002646:	f107 040c 	add.w	r4, r7, #12
 800264a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002650:	f240 2301 	movw	r3, #513	; 0x201
 8002654:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b10      	cmp	r3, #16
 8002674:	f200 808e 	bhi.w	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d049      	beq.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d079      	beq.n	8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002684:	e086      	b.n	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800268c:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d07f      	beq.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	3330      	adds	r3, #48	; 0x30
 80026a2:	443b      	add	r3, r7
 80026a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026a8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d017      	beq.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026b4:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0c5b      	lsrs	r3, r3, #17
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	3330      	adds	r3, #48	; 0x30
 80026c0:	443b      	add	r3, r7
 80026c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e2:	e004      	b.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d102      	bne.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002700:	e04a      	b.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002710:	e042      	b.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002722:	d108      	bne.n	8002736 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800272e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
 8002734:	e01f      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d109      	bne.n	8002756 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800274e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
 8002754:	e00f      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002760:	d11c      	bne.n	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800276e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002774:	e012      	b.n	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002776:	e011      	b.n	800279c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002778:	f7ff fe78 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	0b9b      	lsrs	r3, r3, #14
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	3301      	adds	r3, #1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002792:	e004      	b.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002794:	bf00      	nop
 8002796:	e002      	b.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002798:	bf00      	nop
 800279a:	e000      	b.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800279c:	bf00      	nop
    }
  }
  return (frequency);
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3734      	adds	r7, #52	; 0x34
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	08005260 	.word	0x08005260
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	003d0900 	.word	0x003d0900
 80027b8:	aaaaaaab 	.word	0xaaaaaaab

080027bc <__errno>:
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <__errno+0x8>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	2600      	movs	r6, #0
 80027cc:	4d0c      	ldr	r5, [pc, #48]	; (8002800 <__libc_init_array+0x38>)
 80027ce:	4c0d      	ldr	r4, [pc, #52]	; (8002804 <__libc_init_array+0x3c>)
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	f002 fd2e 	bl	8005238 <_init>
 80027dc:	2600      	movs	r6, #0
 80027de:	4d0a      	ldr	r5, [pc, #40]	; (8002808 <__libc_init_array+0x40>)
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <__libc_init_array+0x44>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	08005664 	.word	0x08005664
 8002804:	08005664 	.word	0x08005664
 8002808:	08005664 	.word	0x08005664
 800280c:	08005668 	.word	0x08005668

08002810 <memset>:
 8002810:	4603      	mov	r3, r0
 8002812:	4402      	add	r2, r0
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <memset+0xa>
 8002818:	4770      	bx	lr
 800281a:	f803 1b01 	strb.w	r1, [r3], #1
 800281e:	e7f9      	b.n	8002814 <memset+0x4>

08002820 <__cvt>:
 8002820:	2b00      	cmp	r3, #0
 8002822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002826:	461f      	mov	r7, r3
 8002828:	bfbb      	ittet	lt
 800282a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800282e:	461f      	movlt	r7, r3
 8002830:	2300      	movge	r3, #0
 8002832:	232d      	movlt	r3, #45	; 0x2d
 8002834:	b088      	sub	sp, #32
 8002836:	4614      	mov	r4, r2
 8002838:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800283a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800283c:	7013      	strb	r3, [r2, #0]
 800283e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002840:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002844:	f023 0820 	bic.w	r8, r3, #32
 8002848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800284c:	d005      	beq.n	800285a <__cvt+0x3a>
 800284e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002852:	d100      	bne.n	8002856 <__cvt+0x36>
 8002854:	3501      	adds	r5, #1
 8002856:	2302      	movs	r3, #2
 8002858:	e000      	b.n	800285c <__cvt+0x3c>
 800285a:	2303      	movs	r3, #3
 800285c:	aa07      	add	r2, sp, #28
 800285e:	9204      	str	r2, [sp, #16]
 8002860:	aa06      	add	r2, sp, #24
 8002862:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002866:	e9cd 3500 	strd	r3, r5, [sp]
 800286a:	4622      	mov	r2, r4
 800286c:	463b      	mov	r3, r7
 800286e:	f000 fcc3 	bl	80031f8 <_dtoa_r>
 8002872:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002876:	4606      	mov	r6, r0
 8002878:	d102      	bne.n	8002880 <__cvt+0x60>
 800287a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800287c:	07db      	lsls	r3, r3, #31
 800287e:	d522      	bpl.n	80028c6 <__cvt+0xa6>
 8002880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002884:	eb06 0905 	add.w	r9, r6, r5
 8002888:	d110      	bne.n	80028ac <__cvt+0x8c>
 800288a:	7833      	ldrb	r3, [r6, #0]
 800288c:	2b30      	cmp	r3, #48	; 0x30
 800288e:	d10a      	bne.n	80028a6 <__cvt+0x86>
 8002890:	2200      	movs	r2, #0
 8002892:	2300      	movs	r3, #0
 8002894:	4620      	mov	r0, r4
 8002896:	4639      	mov	r1, r7
 8002898:	f7fe f886 	bl	80009a8 <__aeabi_dcmpeq>
 800289c:	b918      	cbnz	r0, 80028a6 <__cvt+0x86>
 800289e:	f1c5 0501 	rsb	r5, r5, #1
 80028a2:	f8ca 5000 	str.w	r5, [sl]
 80028a6:	f8da 3000 	ldr.w	r3, [sl]
 80028aa:	4499      	add	r9, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	2300      	movs	r3, #0
 80028b0:	4620      	mov	r0, r4
 80028b2:	4639      	mov	r1, r7
 80028b4:	f7fe f878 	bl	80009a8 <__aeabi_dcmpeq>
 80028b8:	b108      	cbz	r0, 80028be <__cvt+0x9e>
 80028ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80028be:	2230      	movs	r2, #48	; 0x30
 80028c0:	9b07      	ldr	r3, [sp, #28]
 80028c2:	454b      	cmp	r3, r9
 80028c4:	d307      	bcc.n	80028d6 <__cvt+0xb6>
 80028c6:	4630      	mov	r0, r6
 80028c8:	9b07      	ldr	r3, [sp, #28]
 80028ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80028cc:	1b9b      	subs	r3, r3, r6
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	b008      	add	sp, #32
 80028d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d6:	1c59      	adds	r1, r3, #1
 80028d8:	9107      	str	r1, [sp, #28]
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e7f0      	b.n	80028c0 <__cvt+0xa0>

080028de <__exponent>:
 80028de:	4603      	mov	r3, r0
 80028e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028e2:	2900      	cmp	r1, #0
 80028e4:	f803 2b02 	strb.w	r2, [r3], #2
 80028e8:	bfb6      	itet	lt
 80028ea:	222d      	movlt	r2, #45	; 0x2d
 80028ec:	222b      	movge	r2, #43	; 0x2b
 80028ee:	4249      	neglt	r1, r1
 80028f0:	2909      	cmp	r1, #9
 80028f2:	7042      	strb	r2, [r0, #1]
 80028f4:	dd2b      	ble.n	800294e <__exponent+0x70>
 80028f6:	f10d 0407 	add.w	r4, sp, #7
 80028fa:	46a4      	mov	ip, r4
 80028fc:	270a      	movs	r7, #10
 80028fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8002902:	460a      	mov	r2, r1
 8002904:	46a6      	mov	lr, r4
 8002906:	fb07 1516 	mls	r5, r7, r6, r1
 800290a:	2a63      	cmp	r2, #99	; 0x63
 800290c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002910:	4631      	mov	r1, r6
 8002912:	f104 34ff 	add.w	r4, r4, #4294967295
 8002916:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800291a:	dcf0      	bgt.n	80028fe <__exponent+0x20>
 800291c:	3130      	adds	r1, #48	; 0x30
 800291e:	f1ae 0502 	sub.w	r5, lr, #2
 8002922:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002926:	4629      	mov	r1, r5
 8002928:	1c44      	adds	r4, r0, #1
 800292a:	4561      	cmp	r1, ip
 800292c:	d30a      	bcc.n	8002944 <__exponent+0x66>
 800292e:	f10d 0209 	add.w	r2, sp, #9
 8002932:	eba2 020e 	sub.w	r2, r2, lr
 8002936:	4565      	cmp	r5, ip
 8002938:	bf88      	it	hi
 800293a:	2200      	movhi	r2, #0
 800293c:	4413      	add	r3, r2
 800293e:	1a18      	subs	r0, r3, r0
 8002940:	b003      	add	sp, #12
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002944:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002948:	f804 2f01 	strb.w	r2, [r4, #1]!
 800294c:	e7ed      	b.n	800292a <__exponent+0x4c>
 800294e:	2330      	movs	r3, #48	; 0x30
 8002950:	3130      	adds	r1, #48	; 0x30
 8002952:	7083      	strb	r3, [r0, #2]
 8002954:	70c1      	strb	r1, [r0, #3]
 8002956:	1d03      	adds	r3, r0, #4
 8002958:	e7f1      	b.n	800293e <__exponent+0x60>
	...

0800295c <_printf_float>:
 800295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002960:	b091      	sub	sp, #68	; 0x44
 8002962:	460c      	mov	r4, r1
 8002964:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002968:	4616      	mov	r6, r2
 800296a:	461f      	mov	r7, r3
 800296c:	4605      	mov	r5, r0
 800296e:	f001 fa31 	bl	8003dd4 <_localeconv_r>
 8002972:	6803      	ldr	r3, [r0, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	9309      	str	r3, [sp, #36]	; 0x24
 8002978:	f7fd fbea 	bl	8000150 <strlen>
 800297c:	2300      	movs	r3, #0
 800297e:	930e      	str	r3, [sp, #56]	; 0x38
 8002980:	f8d8 3000 	ldr.w	r3, [r8]
 8002984:	900a      	str	r0, [sp, #40]	; 0x28
 8002986:	3307      	adds	r3, #7
 8002988:	f023 0307 	bic.w	r3, r3, #7
 800298c:	f103 0208 	add.w	r2, r3, #8
 8002990:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002994:	f8d4 b000 	ldr.w	fp, [r4]
 8002998:	f8c8 2000 	str.w	r2, [r8]
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80029a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80029a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80029ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	4640      	mov	r0, r8
 80029b4:	4b9c      	ldr	r3, [pc, #624]	; (8002c28 <_printf_float+0x2cc>)
 80029b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029b8:	f7fe f828 	bl	8000a0c <__aeabi_dcmpun>
 80029bc:	bb70      	cbnz	r0, 8002a1c <_printf_float+0xc0>
 80029be:	f04f 32ff 	mov.w	r2, #4294967295
 80029c2:	4640      	mov	r0, r8
 80029c4:	4b98      	ldr	r3, [pc, #608]	; (8002c28 <_printf_float+0x2cc>)
 80029c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029c8:	f7fe f802 	bl	80009d0 <__aeabi_dcmple>
 80029cc:	bb30      	cbnz	r0, 8002a1c <_printf_float+0xc0>
 80029ce:	2200      	movs	r2, #0
 80029d0:	2300      	movs	r3, #0
 80029d2:	4640      	mov	r0, r8
 80029d4:	4651      	mov	r1, sl
 80029d6:	f7fd fff1 	bl	80009bc <__aeabi_dcmplt>
 80029da:	b110      	cbz	r0, 80029e2 <_printf_float+0x86>
 80029dc:	232d      	movs	r3, #45	; 0x2d
 80029de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e2:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <_printf_float+0x2d0>)
 80029e4:	4892      	ldr	r0, [pc, #584]	; (8002c30 <_printf_float+0x2d4>)
 80029e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80029ea:	bf94      	ite	ls
 80029ec:	4698      	movls	r8, r3
 80029ee:	4680      	movhi	r8, r0
 80029f0:	2303      	movs	r3, #3
 80029f2:	f04f 0a00 	mov.w	sl, #0
 80029f6:	6123      	str	r3, [r4, #16]
 80029f8:	f02b 0304 	bic.w	r3, fp, #4
 80029fc:	6023      	str	r3, [r4, #0]
 80029fe:	4633      	mov	r3, r6
 8002a00:	4621      	mov	r1, r4
 8002a02:	4628      	mov	r0, r5
 8002a04:	9700      	str	r7, [sp, #0]
 8002a06:	aa0f      	add	r2, sp, #60	; 0x3c
 8002a08:	f000 f9d4 	bl	8002db4 <_printf_common>
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	f040 8090 	bne.w	8002b32 <_printf_float+0x1d6>
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295
 8002a16:	b011      	add	sp, #68	; 0x44
 8002a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	4653      	mov	r3, sl
 8002a20:	4640      	mov	r0, r8
 8002a22:	4651      	mov	r1, sl
 8002a24:	f7fd fff2 	bl	8000a0c <__aeabi_dcmpun>
 8002a28:	b148      	cbz	r0, 8002a3e <_printf_float+0xe2>
 8002a2a:	f1ba 0f00 	cmp.w	sl, #0
 8002a2e:	bfb8      	it	lt
 8002a30:	232d      	movlt	r3, #45	; 0x2d
 8002a32:	4880      	ldr	r0, [pc, #512]	; (8002c34 <_printf_float+0x2d8>)
 8002a34:	bfb8      	it	lt
 8002a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a3a:	4b7f      	ldr	r3, [pc, #508]	; (8002c38 <_printf_float+0x2dc>)
 8002a3c:	e7d3      	b.n	80029e6 <_printf_float+0x8a>
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	d142      	bne.n	8002ace <_printf_float+0x172>
 8002a48:	2306      	movs	r3, #6
 8002a4a:	6063      	str	r3, [r4, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9206      	str	r2, [sp, #24]
 8002a50:	aa0e      	add	r2, sp, #56	; 0x38
 8002a52:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002a56:	aa0d      	add	r2, sp, #52	; 0x34
 8002a58:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002a5c:	9203      	str	r2, [sp, #12]
 8002a5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002a62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	6863      	ldr	r3, [r4, #4]
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	4628      	mov	r0, r5
 8002a70:	4653      	mov	r3, sl
 8002a72:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a74:	f7ff fed4 	bl	8002820 <__cvt>
 8002a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a7a:	4680      	mov	r8, r0
 8002a7c:	2947      	cmp	r1, #71	; 0x47
 8002a7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a80:	d108      	bne.n	8002a94 <_printf_float+0x138>
 8002a82:	1cc8      	adds	r0, r1, #3
 8002a84:	db02      	blt.n	8002a8c <_printf_float+0x130>
 8002a86:	6863      	ldr	r3, [r4, #4]
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	dd40      	ble.n	8002b0e <_printf_float+0x1b2>
 8002a8c:	f1a9 0902 	sub.w	r9, r9, #2
 8002a90:	fa5f f989 	uxtb.w	r9, r9
 8002a94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002a98:	d81f      	bhi.n	8002ada <_printf_float+0x17e>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	3901      	subs	r1, #1
 8002a9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8002aa4:	f7ff ff1b 	bl	80028de <__exponent>
 8002aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002aaa:	4682      	mov	sl, r0
 8002aac:	1813      	adds	r3, r2, r0
 8002aae:	2a01      	cmp	r2, #1
 8002ab0:	6123      	str	r3, [r4, #16]
 8002ab2:	dc02      	bgt.n	8002aba <_printf_float+0x15e>
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	07d2      	lsls	r2, r2, #31
 8002ab8:	d501      	bpl.n	8002abe <_printf_float+0x162>
 8002aba:	3301      	adds	r3, #1
 8002abc:	6123      	str	r3, [r4, #16]
 8002abe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d09b      	beq.n	80029fe <_printf_float+0xa2>
 8002ac6:	232d      	movs	r3, #45	; 0x2d
 8002ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002acc:	e797      	b.n	80029fe <_printf_float+0xa2>
 8002ace:	2947      	cmp	r1, #71	; 0x47
 8002ad0:	d1bc      	bne.n	8002a4c <_printf_float+0xf0>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ba      	bne.n	8002a4c <_printf_float+0xf0>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e7b7      	b.n	8002a4a <_printf_float+0xee>
 8002ada:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002ade:	d118      	bne.n	8002b12 <_printf_float+0x1b6>
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	6863      	ldr	r3, [r4, #4]
 8002ae4:	dd0b      	ble.n	8002afe <_printf_float+0x1a2>
 8002ae6:	6121      	str	r1, [r4, #16]
 8002ae8:	b913      	cbnz	r3, 8002af0 <_printf_float+0x194>
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	07d0      	lsls	r0, r2, #31
 8002aee:	d502      	bpl.n	8002af6 <_printf_float+0x19a>
 8002af0:	3301      	adds	r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	6123      	str	r3, [r4, #16]
 8002af6:	f04f 0a00 	mov.w	sl, #0
 8002afa:	65a1      	str	r1, [r4, #88]	; 0x58
 8002afc:	e7df      	b.n	8002abe <_printf_float+0x162>
 8002afe:	b913      	cbnz	r3, 8002b06 <_printf_float+0x1aa>
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	07d2      	lsls	r2, r2, #31
 8002b04:	d501      	bpl.n	8002b0a <_printf_float+0x1ae>
 8002b06:	3302      	adds	r3, #2
 8002b08:	e7f4      	b.n	8002af4 <_printf_float+0x198>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e7f2      	b.n	8002af4 <_printf_float+0x198>
 8002b0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b14:	4299      	cmp	r1, r3
 8002b16:	db05      	blt.n	8002b24 <_printf_float+0x1c8>
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	6121      	str	r1, [r4, #16]
 8002b1c:	07d8      	lsls	r0, r3, #31
 8002b1e:	d5ea      	bpl.n	8002af6 <_printf_float+0x19a>
 8002b20:	1c4b      	adds	r3, r1, #1
 8002b22:	e7e7      	b.n	8002af4 <_printf_float+0x198>
 8002b24:	2900      	cmp	r1, #0
 8002b26:	bfcc      	ite	gt
 8002b28:	2201      	movgt	r2, #1
 8002b2a:	f1c1 0202 	rsble	r2, r1, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	e7e0      	b.n	8002af4 <_printf_float+0x198>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	055a      	lsls	r2, r3, #21
 8002b36:	d407      	bmi.n	8002b48 <_printf_float+0x1ec>
 8002b38:	6923      	ldr	r3, [r4, #16]
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4628      	mov	r0, r5
 8002b40:	47b8      	blx	r7
 8002b42:	3001      	adds	r0, #1
 8002b44:	d12b      	bne.n	8002b9e <_printf_float+0x242>
 8002b46:	e764      	b.n	8002a12 <_printf_float+0xb6>
 8002b48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b4c:	f240 80dd 	bls.w	8002d0a <_printf_float+0x3ae>
 8002b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b54:	2200      	movs	r2, #0
 8002b56:	2300      	movs	r3, #0
 8002b58:	f7fd ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d033      	beq.n	8002bc8 <_printf_float+0x26c>
 8002b60:	2301      	movs	r3, #1
 8002b62:	4631      	mov	r1, r6
 8002b64:	4628      	mov	r0, r5
 8002b66:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <_printf_float+0x2e0>)
 8002b68:	47b8      	blx	r7
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	f43f af51 	beq.w	8002a12 <_printf_float+0xb6>
 8002b70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b74:	429a      	cmp	r2, r3
 8002b76:	db02      	blt.n	8002b7e <_printf_float+0x222>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	07d8      	lsls	r0, r3, #31
 8002b7c:	d50f      	bpl.n	8002b9e <_printf_float+0x242>
 8002b7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b82:	4631      	mov	r1, r6
 8002b84:	4628      	mov	r0, r5
 8002b86:	47b8      	blx	r7
 8002b88:	3001      	adds	r0, #1
 8002b8a:	f43f af42 	beq.w	8002a12 <_printf_float+0xb6>
 8002b8e:	f04f 0800 	mov.w	r8, #0
 8002b92:	f104 091a 	add.w	r9, r4, #26
 8002b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4543      	cmp	r3, r8
 8002b9c:	dc09      	bgt.n	8002bb2 <_printf_float+0x256>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	079b      	lsls	r3, r3, #30
 8002ba2:	f100 8102 	bmi.w	8002daa <_printf_float+0x44e>
 8002ba6:	68e0      	ldr	r0, [r4, #12]
 8002ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002baa:	4298      	cmp	r0, r3
 8002bac:	bfb8      	it	lt
 8002bae:	4618      	movlt	r0, r3
 8002bb0:	e731      	b.n	8002a16 <_printf_float+0xba>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	464a      	mov	r2, r9
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b8      	blx	r7
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	f43f af28 	beq.w	8002a12 <_printf_float+0xb6>
 8002bc2:	f108 0801 	add.w	r8, r8, #1
 8002bc6:	e7e6      	b.n	8002b96 <_printf_float+0x23a>
 8002bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	dc38      	bgt.n	8002c40 <_printf_float+0x2e4>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <_printf_float+0x2e0>)
 8002bd6:	47b8      	blx	r7
 8002bd8:	3001      	adds	r0, #1
 8002bda:	f43f af1a 	beq.w	8002a12 <_printf_float+0xb6>
 8002bde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002be2:	4313      	orrs	r3, r2
 8002be4:	d102      	bne.n	8002bec <_printf_float+0x290>
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	07d9      	lsls	r1, r3, #31
 8002bea:	d5d8      	bpl.n	8002b9e <_printf_float+0x242>
 8002bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bf0:	4631      	mov	r1, r6
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	47b8      	blx	r7
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	f43f af0b 	beq.w	8002a12 <_printf_float+0xb6>
 8002bfc:	f04f 0900 	mov.w	r9, #0
 8002c00:	f104 0a1a 	add.w	sl, r4, #26
 8002c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c06:	425b      	negs	r3, r3
 8002c08:	454b      	cmp	r3, r9
 8002c0a:	dc01      	bgt.n	8002c10 <_printf_float+0x2b4>
 8002c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c0e:	e794      	b.n	8002b3a <_printf_float+0x1de>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4652      	mov	r2, sl
 8002c14:	4631      	mov	r1, r6
 8002c16:	4628      	mov	r0, r5
 8002c18:	47b8      	blx	r7
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	f43f aef9 	beq.w	8002a12 <_printf_float+0xb6>
 8002c20:	f109 0901 	add.w	r9, r9, #1
 8002c24:	e7ee      	b.n	8002c04 <_printf_float+0x2a8>
 8002c26:	bf00      	nop
 8002c28:	7fefffff 	.word	0x7fefffff
 8002c2c:	0800528c 	.word	0x0800528c
 8002c30:	08005290 	.word	0x08005290
 8002c34:	08005298 	.word	0x08005298
 8002c38:	08005294 	.word	0x08005294
 8002c3c:	0800529c 	.word	0x0800529c
 8002c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c44:	429a      	cmp	r2, r3
 8002c46:	bfa8      	it	ge
 8002c48:	461a      	movge	r2, r3
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	4691      	mov	r9, r2
 8002c4e:	dc37      	bgt.n	8002cc0 <_printf_float+0x364>
 8002c50:	f04f 0b00 	mov.w	fp, #0
 8002c54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c58:	f104 021a 	add.w	r2, r4, #26
 8002c5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002c60:	ebaa 0309 	sub.w	r3, sl, r9
 8002c64:	455b      	cmp	r3, fp
 8002c66:	dc33      	bgt.n	8002cd0 <_printf_float+0x374>
 8002c68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	db3b      	blt.n	8002ce8 <_printf_float+0x38c>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	07da      	lsls	r2, r3, #31
 8002c74:	d438      	bmi.n	8002ce8 <_printf_float+0x38c>
 8002c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c7a:	eba3 020a 	sub.w	r2, r3, sl
 8002c7e:	eba3 0901 	sub.w	r9, r3, r1
 8002c82:	4591      	cmp	r9, r2
 8002c84:	bfa8      	it	ge
 8002c86:	4691      	movge	r9, r2
 8002c88:	f1b9 0f00 	cmp.w	r9, #0
 8002c8c:	dc34      	bgt.n	8002cf8 <_printf_float+0x39c>
 8002c8e:	f04f 0800 	mov.w	r8, #0
 8002c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c96:	f104 0a1a 	add.w	sl, r4, #26
 8002c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	eba3 0309 	sub.w	r3, r3, r9
 8002ca4:	4543      	cmp	r3, r8
 8002ca6:	f77f af7a 	ble.w	8002b9e <_printf_float+0x242>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4652      	mov	r2, sl
 8002cae:	4631      	mov	r1, r6
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	47b8      	blx	r7
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	f43f aeac 	beq.w	8002a12 <_printf_float+0xb6>
 8002cba:	f108 0801 	add.w	r8, r8, #1
 8002cbe:	e7ec      	b.n	8002c9a <_printf_float+0x33e>
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	4631      	mov	r1, r6
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	47b8      	blx	r7
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d1c0      	bne.n	8002c50 <_printf_float+0x2f4>
 8002cce:	e6a0      	b.n	8002a12 <_printf_float+0xb6>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4631      	mov	r1, r6
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8002cd8:	47b8      	blx	r7
 8002cda:	3001      	adds	r0, #1
 8002cdc:	f43f ae99 	beq.w	8002a12 <_printf_float+0xb6>
 8002ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ce2:	f10b 0b01 	add.w	fp, fp, #1
 8002ce6:	e7b9      	b.n	8002c5c <_printf_float+0x300>
 8002ce8:	4631      	mov	r1, r6
 8002cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cee:	4628      	mov	r0, r5
 8002cf0:	47b8      	blx	r7
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d1bf      	bne.n	8002c76 <_printf_float+0x31a>
 8002cf6:	e68c      	b.n	8002a12 <_printf_float+0xb6>
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	eb08 020a 	add.w	r2, r8, sl
 8002d02:	47b8      	blx	r7
 8002d04:	3001      	adds	r0, #1
 8002d06:	d1c2      	bne.n	8002c8e <_printf_float+0x332>
 8002d08:	e683      	b.n	8002a12 <_printf_float+0xb6>
 8002d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d0c:	2a01      	cmp	r2, #1
 8002d0e:	dc01      	bgt.n	8002d14 <_printf_float+0x3b8>
 8002d10:	07db      	lsls	r3, r3, #31
 8002d12:	d537      	bpl.n	8002d84 <_printf_float+0x428>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4642      	mov	r2, r8
 8002d18:	4631      	mov	r1, r6
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	47b8      	blx	r7
 8002d1e:	3001      	adds	r0, #1
 8002d20:	f43f ae77 	beq.w	8002a12 <_printf_float+0xb6>
 8002d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d28:	4631      	mov	r1, r6
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	47b8      	blx	r7
 8002d2e:	3001      	adds	r0, #1
 8002d30:	f43f ae6f 	beq.w	8002a12 <_printf_float+0xb6>
 8002d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f7fd fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8002d40:	b9d8      	cbnz	r0, 8002d7a <_printf_float+0x41e>
 8002d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d44:	f108 0201 	add.w	r2, r8, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	47b8      	blx	r7
 8002d50:	3001      	adds	r0, #1
 8002d52:	d10e      	bne.n	8002d72 <_printf_float+0x416>
 8002d54:	e65d      	b.n	8002a12 <_printf_float+0xb6>
 8002d56:	2301      	movs	r3, #1
 8002d58:	464a      	mov	r2, r9
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	47b8      	blx	r7
 8002d60:	3001      	adds	r0, #1
 8002d62:	f43f ae56 	beq.w	8002a12 <_printf_float+0xb6>
 8002d66:	f108 0801 	add.w	r8, r8, #1
 8002d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	4543      	cmp	r3, r8
 8002d70:	dcf1      	bgt.n	8002d56 <_printf_float+0x3fa>
 8002d72:	4653      	mov	r3, sl
 8002d74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d78:	e6e0      	b.n	8002b3c <_printf_float+0x1e0>
 8002d7a:	f04f 0800 	mov.w	r8, #0
 8002d7e:	f104 091a 	add.w	r9, r4, #26
 8002d82:	e7f2      	b.n	8002d6a <_printf_float+0x40e>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4642      	mov	r2, r8
 8002d88:	e7df      	b.n	8002d4a <_printf_float+0x3ee>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	464a      	mov	r2, r9
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4628      	mov	r0, r5
 8002d92:	47b8      	blx	r7
 8002d94:	3001      	adds	r0, #1
 8002d96:	f43f ae3c 	beq.w	8002a12 <_printf_float+0xb6>
 8002d9a:	f108 0801 	add.w	r8, r8, #1
 8002d9e:	68e3      	ldr	r3, [r4, #12]
 8002da0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002da2:	1a5b      	subs	r3, r3, r1
 8002da4:	4543      	cmp	r3, r8
 8002da6:	dcf0      	bgt.n	8002d8a <_printf_float+0x42e>
 8002da8:	e6fd      	b.n	8002ba6 <_printf_float+0x24a>
 8002daa:	f04f 0800 	mov.w	r8, #0
 8002dae:	f104 0919 	add.w	r9, r4, #25
 8002db2:	e7f4      	b.n	8002d9e <_printf_float+0x442>

08002db4 <_printf_common>:
 8002db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db8:	4616      	mov	r6, r2
 8002dba:	4699      	mov	r9, r3
 8002dbc:	688a      	ldr	r2, [r1, #8]
 8002dbe:	690b      	ldr	r3, [r1, #16]
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	bfb8      	it	lt
 8002dc6:	4613      	movlt	r3, r2
 8002dc8:	6033      	str	r3, [r6, #0]
 8002dca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dce:	460c      	mov	r4, r1
 8002dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dd4:	b10a      	cbz	r2, 8002dda <_printf_common+0x26>
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	6033      	str	r3, [r6, #0]
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	0699      	lsls	r1, r3, #26
 8002dde:	bf42      	ittt	mi
 8002de0:	6833      	ldrmi	r3, [r6, #0]
 8002de2:	3302      	addmi	r3, #2
 8002de4:	6033      	strmi	r3, [r6, #0]
 8002de6:	6825      	ldr	r5, [r4, #0]
 8002de8:	f015 0506 	ands.w	r5, r5, #6
 8002dec:	d106      	bne.n	8002dfc <_printf_common+0x48>
 8002dee:	f104 0a19 	add.w	sl, r4, #25
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	6832      	ldr	r2, [r6, #0]
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	42ab      	cmp	r3, r5
 8002dfa:	dc28      	bgt.n	8002e4e <_printf_common+0x9a>
 8002dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e00:	1e13      	subs	r3, r2, #0
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	bf18      	it	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	0692      	lsls	r2, r2, #26
 8002e0a:	d42d      	bmi.n	8002e68 <_printf_common+0xb4>
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4638      	mov	r0, r7
 8002e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e14:	47c0      	blx	r8
 8002e16:	3001      	adds	r0, #1
 8002e18:	d020      	beq.n	8002e5c <_printf_common+0xa8>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	68e5      	ldr	r5, [r4, #12]
 8002e1e:	f003 0306 	and.w	r3, r3, #6
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf18      	it	ne
 8002e26:	2500      	movne	r5, #0
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	f04f 0600 	mov.w	r6, #0
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	bf08      	it	eq
 8002e32:	1aad      	subeq	r5, r5, r2
 8002e34:	6922      	ldr	r2, [r4, #16]
 8002e36:	bf08      	it	eq
 8002e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bfc4      	itt	gt
 8002e40:	1a9b      	subgt	r3, r3, r2
 8002e42:	18ed      	addgt	r5, r5, r3
 8002e44:	341a      	adds	r4, #26
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d11a      	bne.n	8002e80 <_printf_common+0xcc>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e008      	b.n	8002e60 <_printf_common+0xac>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4649      	mov	r1, r9
 8002e54:	4638      	mov	r0, r7
 8002e56:	47c0      	blx	r8
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_printf_common+0xb0>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7c4      	b.n	8002df2 <_printf_common+0x3e>
 8002e68:	2030      	movs	r0, #48	; 0x30
 8002e6a:	18e1      	adds	r1, r4, r3
 8002e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e76:	4422      	add	r2, r4
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e7e:	e7c5      	b.n	8002e0c <_printf_common+0x58>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4622      	mov	r2, r4
 8002e84:	4649      	mov	r1, r9
 8002e86:	4638      	mov	r0, r7
 8002e88:	47c0      	blx	r8
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0e6      	beq.n	8002e5c <_printf_common+0xa8>
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7d9      	b.n	8002e46 <_printf_common+0x92>
	...

08002e94 <_printf_i>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	7e0f      	ldrb	r7, [r1, #24]
 8002e9a:	4691      	mov	r9, r2
 8002e9c:	2f78      	cmp	r7, #120	; 0x78
 8002e9e:	4680      	mov	r8, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	469a      	mov	sl, r3
 8002ea4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002eaa:	d807      	bhi.n	8002ebc <_printf_i+0x28>
 8002eac:	2f62      	cmp	r7, #98	; 0x62
 8002eae:	d80a      	bhi.n	8002ec6 <_printf_i+0x32>
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	f000 80d9 	beq.w	8003068 <_printf_i+0x1d4>
 8002eb6:	2f58      	cmp	r7, #88	; 0x58
 8002eb8:	f000 80a4 	beq.w	8003004 <_printf_i+0x170>
 8002ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ec4:	e03a      	b.n	8002f3c <_printf_i+0xa8>
 8002ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eca:	2b15      	cmp	r3, #21
 8002ecc:	d8f6      	bhi.n	8002ebc <_printf_i+0x28>
 8002ece:	a101      	add	r1, pc, #4	; (adr r1, 8002ed4 <_printf_i+0x40>)
 8002ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002ebd 	.word	0x08002ebd
 8002ee0:	08002ebd 	.word	0x08002ebd
 8002ee4:	08002ebd 	.word	0x08002ebd
 8002ee8:	08002ebd 	.word	0x08002ebd
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002ebd 	.word	0x08002ebd
 8002ef4:	08002ebd 	.word	0x08002ebd
 8002ef8:	08002ebd 	.word	0x08002ebd
 8002efc:	08002ebd 	.word	0x08002ebd
 8002f00:	0800304f 	.word	0x0800304f
 8002f04:	08002f71 	.word	0x08002f71
 8002f08:	08003031 	.word	0x08003031
 8002f0c:	08002ebd 	.word	0x08002ebd
 8002f10:	08002ebd 	.word	0x08002ebd
 8002f14:	08003071 	.word	0x08003071
 8002f18:	08002ebd 	.word	0x08002ebd
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002ebd 	.word	0x08002ebd
 8002f24:	08002ebd 	.word	0x08002ebd
 8002f28:	08003039 	.word	0x08003039
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	602a      	str	r2, [r5, #0]
 8002f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0a4      	b.n	800308a <_printf_i+0x1f6>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	6829      	ldr	r1, [r5, #0]
 8002f44:	0606      	lsls	r6, r0, #24
 8002f46:	f101 0304 	add.w	r3, r1, #4
 8002f4a:	d50a      	bpl.n	8002f62 <_printf_i+0xce>
 8002f4c:	680e      	ldr	r6, [r1, #0]
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	2e00      	cmp	r6, #0
 8002f52:	da03      	bge.n	8002f5c <_printf_i+0xc8>
 8002f54:	232d      	movs	r3, #45	; 0x2d
 8002f56:	4276      	negs	r6, r6
 8002f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	485e      	ldr	r0, [pc, #376]	; (80030d8 <_printf_i+0x244>)
 8002f60:	e019      	b.n	8002f96 <_printf_i+0x102>
 8002f62:	680e      	ldr	r6, [r1, #0]
 8002f64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	bf18      	it	ne
 8002f6c:	b236      	sxthne	r6, r6
 8002f6e:	e7ef      	b.n	8002f50 <_printf_i+0xbc>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	1d19      	adds	r1, r3, #4
 8002f76:	6029      	str	r1, [r5, #0]
 8002f78:	0601      	lsls	r1, r0, #24
 8002f7a:	d501      	bpl.n	8002f80 <_printf_i+0xec>
 8002f7c:	681e      	ldr	r6, [r3, #0]
 8002f7e:	e002      	b.n	8002f86 <_printf_i+0xf2>
 8002f80:	0646      	lsls	r6, r0, #25
 8002f82:	d5fb      	bpl.n	8002f7c <_printf_i+0xe8>
 8002f84:	881e      	ldrh	r6, [r3, #0]
 8002f86:	2f6f      	cmp	r7, #111	; 0x6f
 8002f88:	bf0c      	ite	eq
 8002f8a:	2308      	moveq	r3, #8
 8002f8c:	230a      	movne	r3, #10
 8002f8e:	4852      	ldr	r0, [pc, #328]	; (80030d8 <_printf_i+0x244>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f96:	6865      	ldr	r5, [r4, #4]
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	bfa8      	it	ge
 8002f9c:	6821      	ldrge	r1, [r4, #0]
 8002f9e:	60a5      	str	r5, [r4, #8]
 8002fa0:	bfa4      	itt	ge
 8002fa2:	f021 0104 	bicge.w	r1, r1, #4
 8002fa6:	6021      	strge	r1, [r4, #0]
 8002fa8:	b90e      	cbnz	r6, 8002fae <_printf_i+0x11a>
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	d04d      	beq.n	800304a <_printf_i+0x1b6>
 8002fae:	4615      	mov	r5, r2
 8002fb0:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fb4:	fb03 6711 	mls	r7, r3, r1, r6
 8002fb8:	5dc7      	ldrb	r7, [r0, r7]
 8002fba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fbe:	4637      	mov	r7, r6
 8002fc0:	42bb      	cmp	r3, r7
 8002fc2:	460e      	mov	r6, r1
 8002fc4:	d9f4      	bls.n	8002fb0 <_printf_i+0x11c>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10b      	bne.n	8002fe2 <_printf_i+0x14e>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	07de      	lsls	r6, r3, #31
 8002fce:	d508      	bpl.n	8002fe2 <_printf_i+0x14e>
 8002fd0:	6923      	ldr	r3, [r4, #16]
 8002fd2:	6861      	ldr	r1, [r4, #4]
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	bfde      	ittt	le
 8002fd8:	2330      	movle	r3, #48	; 0x30
 8002fda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fe2:	1b52      	subs	r2, r2, r5
 8002fe4:	6122      	str	r2, [r4, #16]
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4640      	mov	r0, r8
 8002fec:	f8cd a000 	str.w	sl, [sp]
 8002ff0:	aa03      	add	r2, sp, #12
 8002ff2:	f7ff fedf 	bl	8002db4 <_printf_common>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d14c      	bne.n	8003094 <_printf_i+0x200>
 8002ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffe:	b004      	add	sp, #16
 8003000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003004:	4834      	ldr	r0, [pc, #208]	; (80030d8 <_printf_i+0x244>)
 8003006:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800300a:	6829      	ldr	r1, [r5, #0]
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003012:	6029      	str	r1, [r5, #0]
 8003014:	061d      	lsls	r5, r3, #24
 8003016:	d514      	bpl.n	8003042 <_printf_i+0x1ae>
 8003018:	07df      	lsls	r7, r3, #31
 800301a:	bf44      	itt	mi
 800301c:	f043 0320 	orrmi.w	r3, r3, #32
 8003020:	6023      	strmi	r3, [r4, #0]
 8003022:	b91e      	cbnz	r6, 800302c <_printf_i+0x198>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	6023      	str	r3, [r4, #0]
 800302c:	2310      	movs	r3, #16
 800302e:	e7af      	b.n	8002f90 <_printf_i+0xfc>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f043 0320 	orr.w	r3, r3, #32
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	2378      	movs	r3, #120	; 0x78
 800303a:	4828      	ldr	r0, [pc, #160]	; (80030dc <_printf_i+0x248>)
 800303c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003040:	e7e3      	b.n	800300a <_printf_i+0x176>
 8003042:	0659      	lsls	r1, r3, #25
 8003044:	bf48      	it	mi
 8003046:	b2b6      	uxthmi	r6, r6
 8003048:	e7e6      	b.n	8003018 <_printf_i+0x184>
 800304a:	4615      	mov	r5, r2
 800304c:	e7bb      	b.n	8002fc6 <_printf_i+0x132>
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	6826      	ldr	r6, [r4, #0]
 8003052:	1d18      	adds	r0, r3, #4
 8003054:	6961      	ldr	r1, [r4, #20]
 8003056:	6028      	str	r0, [r5, #0]
 8003058:	0635      	lsls	r5, r6, #24
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	d501      	bpl.n	8003062 <_printf_i+0x1ce>
 800305e:	6019      	str	r1, [r3, #0]
 8003060:	e002      	b.n	8003068 <_printf_i+0x1d4>
 8003062:	0670      	lsls	r0, r6, #25
 8003064:	d5fb      	bpl.n	800305e <_printf_i+0x1ca>
 8003066:	8019      	strh	r1, [r3, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	4615      	mov	r5, r2
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	e7ba      	b.n	8002fe6 <_printf_i+0x152>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	2100      	movs	r1, #0
 8003074:	1d1a      	adds	r2, r3, #4
 8003076:	602a      	str	r2, [r5, #0]
 8003078:	681d      	ldr	r5, [r3, #0]
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	4628      	mov	r0, r5
 800307e:	f000 feb5 	bl	8003dec <memchr>
 8003082:	b108      	cbz	r0, 8003088 <_printf_i+0x1f4>
 8003084:	1b40      	subs	r0, r0, r5
 8003086:	6060      	str	r0, [r4, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003092:	e7a8      	b.n	8002fe6 <_printf_i+0x152>
 8003094:	462a      	mov	r2, r5
 8003096:	4649      	mov	r1, r9
 8003098:	4640      	mov	r0, r8
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	47d0      	blx	sl
 800309e:	3001      	adds	r0, #1
 80030a0:	d0ab      	beq.n	8002ffa <_printf_i+0x166>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	079b      	lsls	r3, r3, #30
 80030a6:	d413      	bmi.n	80030d0 <_printf_i+0x23c>
 80030a8:	68e0      	ldr	r0, [r4, #12]
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	4298      	cmp	r0, r3
 80030ae:	bfb8      	it	lt
 80030b0:	4618      	movlt	r0, r3
 80030b2:	e7a4      	b.n	8002ffe <_printf_i+0x16a>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4632      	mov	r2, r6
 80030b8:	4649      	mov	r1, r9
 80030ba:	4640      	mov	r0, r8
 80030bc:	47d0      	blx	sl
 80030be:	3001      	adds	r0, #1
 80030c0:	d09b      	beq.n	8002ffa <_printf_i+0x166>
 80030c2:	3501      	adds	r5, #1
 80030c4:	68e3      	ldr	r3, [r4, #12]
 80030c6:	9903      	ldr	r1, [sp, #12]
 80030c8:	1a5b      	subs	r3, r3, r1
 80030ca:	42ab      	cmp	r3, r5
 80030cc:	dcf2      	bgt.n	80030b4 <_printf_i+0x220>
 80030ce:	e7eb      	b.n	80030a8 <_printf_i+0x214>
 80030d0:	2500      	movs	r5, #0
 80030d2:	f104 0619 	add.w	r6, r4, #25
 80030d6:	e7f5      	b.n	80030c4 <_printf_i+0x230>
 80030d8:	0800529e 	.word	0x0800529e
 80030dc:	080052af 	.word	0x080052af

080030e0 <quorem>:
 80030e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	6903      	ldr	r3, [r0, #16]
 80030e6:	690c      	ldr	r4, [r1, #16]
 80030e8:	4607      	mov	r7, r0
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	f2c0 8082 	blt.w	80031f4 <quorem+0x114>
 80030f0:	3c01      	subs	r4, #1
 80030f2:	f100 0514 	add.w	r5, r0, #20
 80030f6:	f101 0814 	add.w	r8, r1, #20
 80030fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003108:	3301      	adds	r3, #1
 800310a:	429a      	cmp	r2, r3
 800310c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003118:	d331      	bcc.n	800317e <quorem+0x9e>
 800311a:	f04f 0e00 	mov.w	lr, #0
 800311e:	4640      	mov	r0, r8
 8003120:	46ac      	mov	ip, r5
 8003122:	46f2      	mov	sl, lr
 8003124:	f850 2b04 	ldr.w	r2, [r0], #4
 8003128:	b293      	uxth	r3, r2
 800312a:	fb06 e303 	mla	r3, r6, r3, lr
 800312e:	0c12      	lsrs	r2, r2, #16
 8003130:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003134:	b29b      	uxth	r3, r3
 8003136:	fb06 e202 	mla	r2, r6, r2, lr
 800313a:	ebaa 0303 	sub.w	r3, sl, r3
 800313e:	f8dc a000 	ldr.w	sl, [ip]
 8003142:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003146:	fa1f fa8a 	uxth.w	sl, sl
 800314a:	4453      	add	r3, sl
 800314c:	f8dc a000 	ldr.w	sl, [ip]
 8003150:	b292      	uxth	r2, r2
 8003152:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800315a:	b29b      	uxth	r3, r3
 800315c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003160:	4581      	cmp	r9, r0
 8003162:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003166:	f84c 3b04 	str.w	r3, [ip], #4
 800316a:	d2db      	bcs.n	8003124 <quorem+0x44>
 800316c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003170:	b92b      	cbnz	r3, 800317e <quorem+0x9e>
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	3b04      	subs	r3, #4
 8003176:	429d      	cmp	r5, r3
 8003178:	461a      	mov	r2, r3
 800317a:	d32f      	bcc.n	80031dc <quorem+0xfc>
 800317c:	613c      	str	r4, [r7, #16]
 800317e:	4638      	mov	r0, r7
 8003180:	f001 f8ce 	bl	8004320 <__mcmp>
 8003184:	2800      	cmp	r0, #0
 8003186:	db25      	blt.n	80031d4 <quorem+0xf4>
 8003188:	4628      	mov	r0, r5
 800318a:	f04f 0c00 	mov.w	ip, #0
 800318e:	3601      	adds	r6, #1
 8003190:	f858 1b04 	ldr.w	r1, [r8], #4
 8003194:	f8d0 e000 	ldr.w	lr, [r0]
 8003198:	b28b      	uxth	r3, r1
 800319a:	ebac 0303 	sub.w	r3, ip, r3
 800319e:	fa1f f28e 	uxth.w	r2, lr
 80031a2:	4413      	add	r3, r2
 80031a4:	0c0a      	lsrs	r2, r1, #16
 80031a6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80031aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031b4:	45c1      	cmp	r9, r8
 80031b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80031ba:	f840 3b04 	str.w	r3, [r0], #4
 80031be:	d2e7      	bcs.n	8003190 <quorem+0xb0>
 80031c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031c8:	b922      	cbnz	r2, 80031d4 <quorem+0xf4>
 80031ca:	3b04      	subs	r3, #4
 80031cc:	429d      	cmp	r5, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	d30a      	bcc.n	80031e8 <quorem+0x108>
 80031d2:	613c      	str	r4, [r7, #16]
 80031d4:	4630      	mov	r0, r6
 80031d6:	b003      	add	sp, #12
 80031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	3b04      	subs	r3, #4
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d1cb      	bne.n	800317c <quorem+0x9c>
 80031e4:	3c01      	subs	r4, #1
 80031e6:	e7c6      	b.n	8003176 <quorem+0x96>
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	3b04      	subs	r3, #4
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	d1f0      	bne.n	80031d2 <quorem+0xf2>
 80031f0:	3c01      	subs	r4, #1
 80031f2:	e7eb      	b.n	80031cc <quorem+0xec>
 80031f4:	2000      	movs	r0, #0
 80031f6:	e7ee      	b.n	80031d6 <quorem+0xf6>

080031f8 <_dtoa_r>:
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	4616      	mov	r6, r2
 80031fe:	461f      	mov	r7, r3
 8003200:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003202:	b099      	sub	sp, #100	; 0x64
 8003204:	4605      	mov	r5, r0
 8003206:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800320a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800320e:	b974      	cbnz	r4, 800322e <_dtoa_r+0x36>
 8003210:	2010      	movs	r0, #16
 8003212:	f000 fde3 	bl	8003ddc <malloc>
 8003216:	4602      	mov	r2, r0
 8003218:	6268      	str	r0, [r5, #36]	; 0x24
 800321a:	b920      	cbnz	r0, 8003226 <_dtoa_r+0x2e>
 800321c:	21ea      	movs	r1, #234	; 0xea
 800321e:	4ba8      	ldr	r3, [pc, #672]	; (80034c0 <_dtoa_r+0x2c8>)
 8003220:	48a8      	ldr	r0, [pc, #672]	; (80034c4 <_dtoa_r+0x2cc>)
 8003222:	f001 fa81 	bl	8004728 <__assert_func>
 8003226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800322a:	6004      	str	r4, [r0, #0]
 800322c:	60c4      	str	r4, [r0, #12]
 800322e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	b151      	cbz	r1, 800324a <_dtoa_r+0x52>
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	2301      	movs	r3, #1
 8003238:	4093      	lsls	r3, r2
 800323a:	604a      	str	r2, [r1, #4]
 800323c:	608b      	str	r3, [r1, #8]
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fe30 	bl	8003ea4 <_Bfree>
 8003244:	2200      	movs	r2, #0
 8003246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	1e3b      	subs	r3, r7, #0
 800324c:	bfaf      	iteee	ge
 800324e:	2300      	movge	r3, #0
 8003250:	2201      	movlt	r2, #1
 8003252:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003256:	9305      	strlt	r3, [sp, #20]
 8003258:	bfa8      	it	ge
 800325a:	f8c8 3000 	strge.w	r3, [r8]
 800325e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003262:	4b99      	ldr	r3, [pc, #612]	; (80034c8 <_dtoa_r+0x2d0>)
 8003264:	bfb8      	it	lt
 8003266:	f8c8 2000 	strlt.w	r2, [r8]
 800326a:	ea33 0309 	bics.w	r3, r3, r9
 800326e:	d119      	bne.n	80032a4 <_dtoa_r+0xac>
 8003270:	f242 730f 	movw	r3, #9999	; 0x270f
 8003274:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800327c:	4333      	orrs	r3, r6
 800327e:	f000 857f 	beq.w	8003d80 <_dtoa_r+0xb88>
 8003282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003284:	b953      	cbnz	r3, 800329c <_dtoa_r+0xa4>
 8003286:	4b91      	ldr	r3, [pc, #580]	; (80034cc <_dtoa_r+0x2d4>)
 8003288:	e022      	b.n	80032d0 <_dtoa_r+0xd8>
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <_dtoa_r+0x2d8>)
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	3308      	adds	r3, #8
 8003290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	9803      	ldr	r0, [sp, #12]
 8003296:	b019      	add	sp, #100	; 0x64
 8003298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329c:	4b8b      	ldr	r3, [pc, #556]	; (80034cc <_dtoa_r+0x2d4>)
 800329e:	9303      	str	r3, [sp, #12]
 80032a0:	3303      	adds	r3, #3
 80032a2:	e7f5      	b.n	8003290 <_dtoa_r+0x98>
 80032a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80032a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80032ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032b0:	2200      	movs	r2, #0
 80032b2:	2300      	movs	r3, #0
 80032b4:	f7fd fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80032b8:	4680      	mov	r8, r0
 80032ba:	b158      	cbz	r0, 80032d4 <_dtoa_r+0xdc>
 80032bc:	2301      	movs	r3, #1
 80032be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8558 	beq.w	8003d7a <_dtoa_r+0xb82>
 80032ca:	4882      	ldr	r0, [pc, #520]	; (80034d4 <_dtoa_r+0x2dc>)
 80032cc:	6018      	str	r0, [r3, #0]
 80032ce:	1e43      	subs	r3, r0, #1
 80032d0:	9303      	str	r3, [sp, #12]
 80032d2:	e7df      	b.n	8003294 <_dtoa_r+0x9c>
 80032d4:	ab16      	add	r3, sp, #88	; 0x58
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	ab17      	add	r3, sp, #92	; 0x5c
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80032e2:	f001 f8c5 	bl	8004470 <__d2b>
 80032e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80032ea:	4683      	mov	fp, r0
 80032ec:	2c00      	cmp	r4, #0
 80032ee:	d07f      	beq.n	80033f0 <_dtoa_r+0x1f8>
 80032f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80032fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003302:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003306:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800330a:	2200      	movs	r2, #0
 800330c:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <_dtoa_r+0x2e0>)
 800330e:	f7fc ff2b 	bl	8000168 <__aeabi_dsub>
 8003312:	a365      	add	r3, pc, #404	; (adr r3, 80034a8 <_dtoa_r+0x2b0>)
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f7fd f8de 	bl	80004d8 <__aeabi_dmul>
 800331c:	a364      	add	r3, pc, #400	; (adr r3, 80034b0 <_dtoa_r+0x2b8>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fc ff23 	bl	800016c <__adddf3>
 8003326:	4606      	mov	r6, r0
 8003328:	4620      	mov	r0, r4
 800332a:	460f      	mov	r7, r1
 800332c:	f7fd f86a 	bl	8000404 <__aeabi_i2d>
 8003330:	a361      	add	r3, pc, #388	; (adr r3, 80034b8 <_dtoa_r+0x2c0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f8cf 	bl	80004d8 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4630      	mov	r0, r6
 8003340:	4639      	mov	r1, r7
 8003342:	f7fc ff13 	bl	800016c <__adddf3>
 8003346:	4606      	mov	r6, r0
 8003348:	460f      	mov	r7, r1
 800334a:	f7fd fb75 	bl	8000a38 <__aeabi_d2iz>
 800334e:	2200      	movs	r2, #0
 8003350:	4682      	mov	sl, r0
 8003352:	2300      	movs	r3, #0
 8003354:	4630      	mov	r0, r6
 8003356:	4639      	mov	r1, r7
 8003358:	f7fd fb30 	bl	80009bc <__aeabi_dcmplt>
 800335c:	b148      	cbz	r0, 8003372 <_dtoa_r+0x17a>
 800335e:	4650      	mov	r0, sl
 8003360:	f7fd f850 	bl	8000404 <__aeabi_i2d>
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	f7fd fb1e 	bl	80009a8 <__aeabi_dcmpeq>
 800336c:	b908      	cbnz	r0, 8003372 <_dtoa_r+0x17a>
 800336e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003372:	f1ba 0f16 	cmp.w	sl, #22
 8003376:	d858      	bhi.n	800342a <_dtoa_r+0x232>
 8003378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800337c:	4b57      	ldr	r3, [pc, #348]	; (80034dc <_dtoa_r+0x2e4>)
 800337e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd fb19 	bl	80009bc <__aeabi_dcmplt>
 800338a:	2800      	cmp	r0, #0
 800338c:	d04f      	beq.n	800342e <_dtoa_r+0x236>
 800338e:	2300      	movs	r3, #0
 8003390:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003394:	930f      	str	r3, [sp, #60]	; 0x3c
 8003396:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003398:	1b1c      	subs	r4, r3, r4
 800339a:	1e63      	subs	r3, r4, #1
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	bf49      	itett	mi
 80033a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80033a4:	2300      	movpl	r3, #0
 80033a6:	9306      	strmi	r3, [sp, #24]
 80033a8:	2300      	movmi	r3, #0
 80033aa:	bf54      	ite	pl
 80033ac:	9306      	strpl	r3, [sp, #24]
 80033ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80033b0:	f1ba 0f00 	cmp.w	sl, #0
 80033b4:	db3d      	blt.n	8003432 <_dtoa_r+0x23a>
 80033b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80033bc:	4453      	add	r3, sl
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
 80033c0:	2300      	movs	r3, #0
 80033c2:	930a      	str	r3, [sp, #40]	; 0x28
 80033c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	f200 808c 	bhi.w	80034e4 <_dtoa_r+0x2ec>
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	bfc4      	itt	gt
 80033d0:	3b04      	subgt	r3, #4
 80033d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80033d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033d6:	bfc8      	it	gt
 80033d8:	2400      	movgt	r4, #0
 80033da:	f1a3 0302 	sub.w	r3, r3, #2
 80033de:	bfd8      	it	le
 80033e0:	2401      	movle	r4, #1
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	f200 808a 	bhi.w	80034fc <_dtoa_r+0x304>
 80033e8:	e8df f003 	tbb	[pc, r3]
 80033ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80033f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80033f4:	441c      	add	r4, r3
 80033f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	bfc3      	ittte	gt
 80033fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003402:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003406:	fa09 f303 	lslgt.w	r3, r9, r3
 800340a:	f1c3 0320 	rsble	r3, r3, #32
 800340e:	bfc6      	itte	gt
 8003410:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003414:	4318      	orrgt	r0, r3
 8003416:	fa06 f003 	lslle.w	r0, r6, r3
 800341a:	f7fc ffe3 	bl	80003e4 <__aeabi_ui2d>
 800341e:	2301      	movs	r3, #1
 8003420:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003424:	3c01      	subs	r4, #1
 8003426:	9313      	str	r3, [sp, #76]	; 0x4c
 8003428:	e76f      	b.n	800330a <_dtoa_r+0x112>
 800342a:	2301      	movs	r3, #1
 800342c:	e7b2      	b.n	8003394 <_dtoa_r+0x19c>
 800342e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003430:	e7b1      	b.n	8003396 <_dtoa_r+0x19e>
 8003432:	9b06      	ldr	r3, [sp, #24]
 8003434:	eba3 030a 	sub.w	r3, r3, sl
 8003438:	9306      	str	r3, [sp, #24]
 800343a:	f1ca 0300 	rsb	r3, sl, #0
 800343e:	930a      	str	r3, [sp, #40]	; 0x28
 8003440:	2300      	movs	r3, #0
 8003442:	930e      	str	r3, [sp, #56]	; 0x38
 8003444:	e7be      	b.n	80033c4 <_dtoa_r+0x1cc>
 8003446:	2300      	movs	r3, #0
 8003448:	930b      	str	r3, [sp, #44]	; 0x2c
 800344a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800344c:	2b00      	cmp	r3, #0
 800344e:	dc58      	bgt.n	8003502 <_dtoa_r+0x30a>
 8003450:	f04f 0901 	mov.w	r9, #1
 8003454:	464b      	mov	r3, r9
 8003456:	f8cd 9020 	str.w	r9, [sp, #32]
 800345a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800345e:	2200      	movs	r2, #0
 8003460:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003462:	6042      	str	r2, [r0, #4]
 8003464:	2204      	movs	r2, #4
 8003466:	f102 0614 	add.w	r6, r2, #20
 800346a:	429e      	cmp	r6, r3
 800346c:	6841      	ldr	r1, [r0, #4]
 800346e:	d94e      	bls.n	800350e <_dtoa_r+0x316>
 8003470:	4628      	mov	r0, r5
 8003472:	f000 fcd7 	bl	8003e24 <_Balloc>
 8003476:	9003      	str	r0, [sp, #12]
 8003478:	2800      	cmp	r0, #0
 800347a:	d14c      	bne.n	8003516 <_dtoa_r+0x31e>
 800347c:	4602      	mov	r2, r0
 800347e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <_dtoa_r+0x2e8>)
 8003484:	e6cc      	b.n	8003220 <_dtoa_r+0x28>
 8003486:	2301      	movs	r3, #1
 8003488:	e7de      	b.n	8003448 <_dtoa_r+0x250>
 800348a:	2300      	movs	r3, #0
 800348c:	930b      	str	r3, [sp, #44]	; 0x2c
 800348e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003490:	eb0a 0903 	add.w	r9, sl, r3
 8003494:	f109 0301 	add.w	r3, r9, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	9308      	str	r3, [sp, #32]
 800349c:	bfb8      	it	lt
 800349e:	2301      	movlt	r3, #1
 80034a0:	e7dd      	b.n	800345e <_dtoa_r+0x266>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e7f2      	b.n	800348c <_dtoa_r+0x294>
 80034a6:	bf00      	nop
 80034a8:	636f4361 	.word	0x636f4361
 80034ac:	3fd287a7 	.word	0x3fd287a7
 80034b0:	8b60c8b3 	.word	0x8b60c8b3
 80034b4:	3fc68a28 	.word	0x3fc68a28
 80034b8:	509f79fb 	.word	0x509f79fb
 80034bc:	3fd34413 	.word	0x3fd34413
 80034c0:	080052cd 	.word	0x080052cd
 80034c4:	080052e4 	.word	0x080052e4
 80034c8:	7ff00000 	.word	0x7ff00000
 80034cc:	080052c9 	.word	0x080052c9
 80034d0:	080052c0 	.word	0x080052c0
 80034d4:	0800529d 	.word	0x0800529d
 80034d8:	3ff80000 	.word	0x3ff80000
 80034dc:	080053d8 	.word	0x080053d8
 80034e0:	0800533f 	.word	0x0800533f
 80034e4:	2401      	movs	r4, #1
 80034e6:	2300      	movs	r3, #0
 80034e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80034ea:	9322      	str	r3, [sp, #136]	; 0x88
 80034ec:	f04f 39ff 	mov.w	r9, #4294967295
 80034f0:	2200      	movs	r2, #0
 80034f2:	2312      	movs	r3, #18
 80034f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80034f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80034fa:	e7b0      	b.n	800345e <_dtoa_r+0x266>
 80034fc:	2301      	movs	r3, #1
 80034fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003500:	e7f4      	b.n	80034ec <_dtoa_r+0x2f4>
 8003502:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003506:	464b      	mov	r3, r9
 8003508:	f8cd 9020 	str.w	r9, [sp, #32]
 800350c:	e7a7      	b.n	800345e <_dtoa_r+0x266>
 800350e:	3101      	adds	r1, #1
 8003510:	6041      	str	r1, [r0, #4]
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	e7a7      	b.n	8003466 <_dtoa_r+0x26e>
 8003516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003518:	9a03      	ldr	r2, [sp, #12]
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	9b08      	ldr	r3, [sp, #32]
 800351e:	2b0e      	cmp	r3, #14
 8003520:	f200 80a8 	bhi.w	8003674 <_dtoa_r+0x47c>
 8003524:	2c00      	cmp	r4, #0
 8003526:	f000 80a5 	beq.w	8003674 <_dtoa_r+0x47c>
 800352a:	f1ba 0f00 	cmp.w	sl, #0
 800352e:	dd34      	ble.n	800359a <_dtoa_r+0x3a2>
 8003530:	4a9a      	ldr	r2, [pc, #616]	; (800379c <_dtoa_r+0x5a4>)
 8003532:	f00a 030f 	and.w	r3, sl, #15
 8003536:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800353a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800353e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003542:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003546:	ea4f 142a 	mov.w	r4, sl, asr #4
 800354a:	d016      	beq.n	800357a <_dtoa_r+0x382>
 800354c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003550:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <_dtoa_r+0x5a8>)
 8003552:	2703      	movs	r7, #3
 8003554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003558:	f7fd f8e8 	bl	800072c <__aeabi_ddiv>
 800355c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003560:	f004 040f 	and.w	r4, r4, #15
 8003564:	4e8e      	ldr	r6, [pc, #568]	; (80037a0 <_dtoa_r+0x5a8>)
 8003566:	b954      	cbnz	r4, 800357e <_dtoa_r+0x386>
 8003568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800356c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003570:	f7fd f8dc 	bl	800072c <__aeabi_ddiv>
 8003574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003578:	e029      	b.n	80035ce <_dtoa_r+0x3d6>
 800357a:	2702      	movs	r7, #2
 800357c:	e7f2      	b.n	8003564 <_dtoa_r+0x36c>
 800357e:	07e1      	lsls	r1, r4, #31
 8003580:	d508      	bpl.n	8003594 <_dtoa_r+0x39c>
 8003582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003586:	e9d6 2300 	ldrd	r2, r3, [r6]
 800358a:	f7fc ffa5 	bl	80004d8 <__aeabi_dmul>
 800358e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003592:	3701      	adds	r7, #1
 8003594:	1064      	asrs	r4, r4, #1
 8003596:	3608      	adds	r6, #8
 8003598:	e7e5      	b.n	8003566 <_dtoa_r+0x36e>
 800359a:	f000 80a5 	beq.w	80036e8 <_dtoa_r+0x4f0>
 800359e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035a2:	f1ca 0400 	rsb	r4, sl, #0
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <_dtoa_r+0x5a4>)
 80035a8:	f004 020f 	and.w	r2, r4, #15
 80035ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fc ff90 	bl	80004d8 <__aeabi_dmul>
 80035b8:	2702      	movs	r7, #2
 80035ba:	2300      	movs	r3, #0
 80035bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035c0:	4e77      	ldr	r6, [pc, #476]	; (80037a0 <_dtoa_r+0x5a8>)
 80035c2:	1124      	asrs	r4, r4, #4
 80035c4:	2c00      	cmp	r4, #0
 80035c6:	f040 8084 	bne.w	80036d2 <_dtoa_r+0x4da>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d2      	bne.n	8003574 <_dtoa_r+0x37c>
 80035ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 808b 	beq.w	80036ec <_dtoa_r+0x4f4>
 80035d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80035da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80035de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035e2:	2200      	movs	r2, #0
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <_dtoa_r+0x5ac>)
 80035e6:	f7fd f9e9 	bl	80009bc <__aeabi_dcmplt>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d07e      	beq.n	80036ec <_dtoa_r+0x4f4>
 80035ee:	9b08      	ldr	r3, [sp, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d07b      	beq.n	80036ec <_dtoa_r+0x4f4>
 80035f4:	f1b9 0f00 	cmp.w	r9, #0
 80035f8:	dd38      	ble.n	800366c <_dtoa_r+0x474>
 80035fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035fe:	2200      	movs	r2, #0
 8003600:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <_dtoa_r+0x5b0>)
 8003602:	f7fc ff69 	bl	80004d8 <__aeabi_dmul>
 8003606:	464c      	mov	r4, r9
 8003608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800360c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003610:	3701      	adds	r7, #1
 8003612:	4638      	mov	r0, r7
 8003614:	f7fc fef6 	bl	8000404 <__aeabi_i2d>
 8003618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800361c:	f7fc ff5c 	bl	80004d8 <__aeabi_dmul>
 8003620:	2200      	movs	r2, #0
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <_dtoa_r+0x5b4>)
 8003624:	f7fc fda2 	bl	800016c <__adddf3>
 8003628:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800362c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003630:	9611      	str	r6, [sp, #68]	; 0x44
 8003632:	2c00      	cmp	r4, #0
 8003634:	d15d      	bne.n	80036f2 <_dtoa_r+0x4fa>
 8003636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800363a:	2200      	movs	r2, #0
 800363c:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <_dtoa_r+0x5b8>)
 800363e:	f7fc fd93 	bl	8000168 <__aeabi_dsub>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800364a:	4633      	mov	r3, r6
 800364c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800364e:	f7fd f9d3 	bl	80009f8 <__aeabi_dcmpgt>
 8003652:	2800      	cmp	r0, #0
 8003654:	f040 829c 	bne.w	8003b90 <_dtoa_r+0x998>
 8003658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800365c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800365e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003662:	f7fd f9ab 	bl	80009bc <__aeabi_dcmplt>
 8003666:	2800      	cmp	r0, #0
 8003668:	f040 8290 	bne.w	8003b8c <_dtoa_r+0x994>
 800366c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003670:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003676:	2b00      	cmp	r3, #0
 8003678:	f2c0 8152 	blt.w	8003920 <_dtoa_r+0x728>
 800367c:	f1ba 0f0e 	cmp.w	sl, #14
 8003680:	f300 814e 	bgt.w	8003920 <_dtoa_r+0x728>
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <_dtoa_r+0x5a4>)
 8003686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800368a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800368e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f280 80db 	bge.w	8003850 <_dtoa_r+0x658>
 800369a:	9b08      	ldr	r3, [sp, #32]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f300 80d7 	bgt.w	8003850 <_dtoa_r+0x658>
 80036a2:	f040 8272 	bne.w	8003b8a <_dtoa_r+0x992>
 80036a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036aa:	2200      	movs	r2, #0
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <_dtoa_r+0x5b8>)
 80036ae:	f7fc ff13 	bl	80004d8 <__aeabi_dmul>
 80036b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036b6:	f7fd f995 	bl	80009e4 <__aeabi_dcmpge>
 80036ba:	9c08      	ldr	r4, [sp, #32]
 80036bc:	4626      	mov	r6, r4
 80036be:	2800      	cmp	r0, #0
 80036c0:	f040 8248 	bne.w	8003b54 <_dtoa_r+0x95c>
 80036c4:	2331      	movs	r3, #49	; 0x31
 80036c6:	9f03      	ldr	r7, [sp, #12]
 80036c8:	f10a 0a01 	add.w	sl, sl, #1
 80036cc:	f807 3b01 	strb.w	r3, [r7], #1
 80036d0:	e244      	b.n	8003b5c <_dtoa_r+0x964>
 80036d2:	07e2      	lsls	r2, r4, #31
 80036d4:	d505      	bpl.n	80036e2 <_dtoa_r+0x4ea>
 80036d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80036da:	f7fc fefd 	bl	80004d8 <__aeabi_dmul>
 80036de:	2301      	movs	r3, #1
 80036e0:	3701      	adds	r7, #1
 80036e2:	1064      	asrs	r4, r4, #1
 80036e4:	3608      	adds	r6, #8
 80036e6:	e76d      	b.n	80035c4 <_dtoa_r+0x3cc>
 80036e8:	2702      	movs	r7, #2
 80036ea:	e770      	b.n	80035ce <_dtoa_r+0x3d6>
 80036ec:	46d0      	mov	r8, sl
 80036ee:	9c08      	ldr	r4, [sp, #32]
 80036f0:	e78f      	b.n	8003612 <_dtoa_r+0x41a>
 80036f2:	9903      	ldr	r1, [sp, #12]
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <_dtoa_r+0x5a4>)
 80036f6:	4421      	add	r1, r4
 80036f8:	9112      	str	r1, [sp, #72]	; 0x48
 80036fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003700:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003704:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003708:	2900      	cmp	r1, #0
 800370a:	d055      	beq.n	80037b8 <_dtoa_r+0x5c0>
 800370c:	2000      	movs	r0, #0
 800370e:	4929      	ldr	r1, [pc, #164]	; (80037b4 <_dtoa_r+0x5bc>)
 8003710:	f7fd f80c 	bl	800072c <__aeabi_ddiv>
 8003714:	463b      	mov	r3, r7
 8003716:	4632      	mov	r2, r6
 8003718:	f7fc fd26 	bl	8000168 <__aeabi_dsub>
 800371c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003720:	9f03      	ldr	r7, [sp, #12]
 8003722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003726:	f7fd f987 	bl	8000a38 <__aeabi_d2iz>
 800372a:	4604      	mov	r4, r0
 800372c:	f7fc fe6a 	bl	8000404 <__aeabi_i2d>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003738:	f7fc fd16 	bl	8000168 <__aeabi_dsub>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	3430      	adds	r4, #48	; 0x30
 8003742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800374a:	f807 4b01 	strb.w	r4, [r7], #1
 800374e:	f7fd f935 	bl	80009bc <__aeabi_dcmplt>
 8003752:	2800      	cmp	r0, #0
 8003754:	d174      	bne.n	8003840 <_dtoa_r+0x648>
 8003756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800375a:	2000      	movs	r0, #0
 800375c:	4911      	ldr	r1, [pc, #68]	; (80037a4 <_dtoa_r+0x5ac>)
 800375e:	f7fc fd03 	bl	8000168 <__aeabi_dsub>
 8003762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003766:	f7fd f929 	bl	80009bc <__aeabi_dcmplt>
 800376a:	2800      	cmp	r0, #0
 800376c:	f040 80b7 	bne.w	80038de <_dtoa_r+0x6e6>
 8003770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003772:	429f      	cmp	r7, r3
 8003774:	f43f af7a 	beq.w	800366c <_dtoa_r+0x474>
 8003778:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800377c:	2200      	movs	r2, #0
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <_dtoa_r+0x5b0>)
 8003780:	f7fc feaa 	bl	80004d8 <__aeabi_dmul>
 8003784:	2200      	movs	r2, #0
 8003786:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800378a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <_dtoa_r+0x5b0>)
 8003790:	f7fc fea2 	bl	80004d8 <__aeabi_dmul>
 8003794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003798:	e7c3      	b.n	8003722 <_dtoa_r+0x52a>
 800379a:	bf00      	nop
 800379c:	080053d8 	.word	0x080053d8
 80037a0:	080053b0 	.word	0x080053b0
 80037a4:	3ff00000 	.word	0x3ff00000
 80037a8:	40240000 	.word	0x40240000
 80037ac:	401c0000 	.word	0x401c0000
 80037b0:	40140000 	.word	0x40140000
 80037b4:	3fe00000 	.word	0x3fe00000
 80037b8:	4630      	mov	r0, r6
 80037ba:	4639      	mov	r1, r7
 80037bc:	f7fc fe8c 	bl	80004d8 <__aeabi_dmul>
 80037c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80037c6:	9c03      	ldr	r4, [sp, #12]
 80037c8:	9314      	str	r3, [sp, #80]	; 0x50
 80037ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037ce:	f7fd f933 	bl	8000a38 <__aeabi_d2iz>
 80037d2:	9015      	str	r0, [sp, #84]	; 0x54
 80037d4:	f7fc fe16 	bl	8000404 <__aeabi_i2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037e0:	f7fc fcc2 	bl	8000168 <__aeabi_dsub>
 80037e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037e6:	4606      	mov	r6, r0
 80037e8:	3330      	adds	r3, #48	; 0x30
 80037ea:	f804 3b01 	strb.w	r3, [r4], #1
 80037ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037f0:	460f      	mov	r7, r1
 80037f2:	429c      	cmp	r4, r3
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	d124      	bne.n	8003844 <_dtoa_r+0x64c>
 80037fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037fe:	4bb0      	ldr	r3, [pc, #704]	; (8003ac0 <_dtoa_r+0x8c8>)
 8003800:	f7fc fcb4 	bl	800016c <__adddf3>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4630      	mov	r0, r6
 800380a:	4639      	mov	r1, r7
 800380c:	f7fd f8f4 	bl	80009f8 <__aeabi_dcmpgt>
 8003810:	2800      	cmp	r0, #0
 8003812:	d163      	bne.n	80038dc <_dtoa_r+0x6e4>
 8003814:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003818:	2000      	movs	r0, #0
 800381a:	49a9      	ldr	r1, [pc, #676]	; (8003ac0 <_dtoa_r+0x8c8>)
 800381c:	f7fc fca4 	bl	8000168 <__aeabi_dsub>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4630      	mov	r0, r6
 8003826:	4639      	mov	r1, r7
 8003828:	f7fd f8c8 	bl	80009bc <__aeabi_dcmplt>
 800382c:	2800      	cmp	r0, #0
 800382e:	f43f af1d 	beq.w	800366c <_dtoa_r+0x474>
 8003832:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003834:	1e7b      	subs	r3, r7, #1
 8003836:	9314      	str	r3, [sp, #80]	; 0x50
 8003838:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d0f8      	beq.n	8003832 <_dtoa_r+0x63a>
 8003840:	46c2      	mov	sl, r8
 8003842:	e03b      	b.n	80038bc <_dtoa_r+0x6c4>
 8003844:	4b9f      	ldr	r3, [pc, #636]	; (8003ac4 <_dtoa_r+0x8cc>)
 8003846:	f7fc fe47 	bl	80004d8 <__aeabi_dmul>
 800384a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800384e:	e7bc      	b.n	80037ca <_dtoa_r+0x5d2>
 8003850:	9f03      	ldr	r7, [sp, #12]
 8003852:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fc ff65 	bl	800072c <__aeabi_ddiv>
 8003862:	f7fd f8e9 	bl	8000a38 <__aeabi_d2iz>
 8003866:	4604      	mov	r4, r0
 8003868:	f7fc fdcc 	bl	8000404 <__aeabi_i2d>
 800386c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003870:	f7fc fe32 	bl	80004d8 <__aeabi_dmul>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4640      	mov	r0, r8
 800387a:	4649      	mov	r1, r9
 800387c:	f7fc fc74 	bl	8000168 <__aeabi_dsub>
 8003880:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003884:	f807 6b01 	strb.w	r6, [r7], #1
 8003888:	9e03      	ldr	r6, [sp, #12]
 800388a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800388e:	1bbe      	subs	r6, r7, r6
 8003890:	45b4      	cmp	ip, r6
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	d136      	bne.n	8003906 <_dtoa_r+0x70e>
 8003898:	f7fc fc68 	bl	800016c <__adddf3>
 800389c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038a0:	4680      	mov	r8, r0
 80038a2:	4689      	mov	r9, r1
 80038a4:	f7fd f8a8 	bl	80009f8 <__aeabi_dcmpgt>
 80038a8:	bb58      	cbnz	r0, 8003902 <_dtoa_r+0x70a>
 80038aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f7fd f879 	bl	80009a8 <__aeabi_dcmpeq>
 80038b6:	b108      	cbz	r0, 80038bc <_dtoa_r+0x6c4>
 80038b8:	07e1      	lsls	r1, r4, #31
 80038ba:	d422      	bmi.n	8003902 <_dtoa_r+0x70a>
 80038bc:	4628      	mov	r0, r5
 80038be:	4659      	mov	r1, fp
 80038c0:	f000 faf0 	bl	8003ea4 <_Bfree>
 80038c4:	2300      	movs	r3, #0
 80038c6:	703b      	strb	r3, [r7, #0]
 80038c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80038ca:	f10a 0001 	add.w	r0, sl, #1
 80038ce:	6018      	str	r0, [r3, #0]
 80038d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f43f acde 	beq.w	8003294 <_dtoa_r+0x9c>
 80038d8:	601f      	str	r7, [r3, #0]
 80038da:	e4db      	b.n	8003294 <_dtoa_r+0x9c>
 80038dc:	4627      	mov	r7, r4
 80038de:	463b      	mov	r3, r7
 80038e0:	461f      	mov	r7, r3
 80038e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038e6:	2a39      	cmp	r2, #57	; 0x39
 80038e8:	d107      	bne.n	80038fa <_dtoa_r+0x702>
 80038ea:	9a03      	ldr	r2, [sp, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1f7      	bne.n	80038e0 <_dtoa_r+0x6e8>
 80038f0:	2230      	movs	r2, #48	; 0x30
 80038f2:	9903      	ldr	r1, [sp, #12]
 80038f4:	f108 0801 	add.w	r8, r8, #1
 80038f8:	700a      	strb	r2, [r1, #0]
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	3201      	adds	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	e79e      	b.n	8003840 <_dtoa_r+0x648>
 8003902:	46d0      	mov	r8, sl
 8003904:	e7eb      	b.n	80038de <_dtoa_r+0x6e6>
 8003906:	2200      	movs	r2, #0
 8003908:	4b6e      	ldr	r3, [pc, #440]	; (8003ac4 <_dtoa_r+0x8cc>)
 800390a:	f7fc fde5 	bl	80004d8 <__aeabi_dmul>
 800390e:	2200      	movs	r2, #0
 8003910:	2300      	movs	r3, #0
 8003912:	4680      	mov	r8, r0
 8003914:	4689      	mov	r9, r1
 8003916:	f7fd f847 	bl	80009a8 <__aeabi_dcmpeq>
 800391a:	2800      	cmp	r0, #0
 800391c:	d09b      	beq.n	8003856 <_dtoa_r+0x65e>
 800391e:	e7cd      	b.n	80038bc <_dtoa_r+0x6c4>
 8003920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003922:	2a00      	cmp	r2, #0
 8003924:	f000 80d0 	beq.w	8003ac8 <_dtoa_r+0x8d0>
 8003928:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800392a:	2a01      	cmp	r2, #1
 800392c:	f300 80ae 	bgt.w	8003a8c <_dtoa_r+0x894>
 8003930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003932:	2a00      	cmp	r2, #0
 8003934:	f000 80a6 	beq.w	8003a84 <_dtoa_r+0x88c>
 8003938:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800393c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800393e:	9f06      	ldr	r7, [sp, #24]
 8003940:	9a06      	ldr	r2, [sp, #24]
 8003942:	2101      	movs	r1, #1
 8003944:	441a      	add	r2, r3
 8003946:	9206      	str	r2, [sp, #24]
 8003948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800394a:	4628      	mov	r0, r5
 800394c:	441a      	add	r2, r3
 800394e:	9209      	str	r2, [sp, #36]	; 0x24
 8003950:	f000 fb5e 	bl	8004010 <__i2b>
 8003954:	4606      	mov	r6, r0
 8003956:	2f00      	cmp	r7, #0
 8003958:	dd0c      	ble.n	8003974 <_dtoa_r+0x77c>
 800395a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	dd09      	ble.n	8003974 <_dtoa_r+0x77c>
 8003960:	42bb      	cmp	r3, r7
 8003962:	bfa8      	it	ge
 8003964:	463b      	movge	r3, r7
 8003966:	9a06      	ldr	r2, [sp, #24]
 8003968:	1aff      	subs	r7, r7, r3
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	9206      	str	r2, [sp, #24]
 800396e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	9309      	str	r3, [sp, #36]	; 0x24
 8003974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003976:	b1f3      	cbz	r3, 80039b6 <_dtoa_r+0x7be>
 8003978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80a8 	beq.w	8003ad0 <_dtoa_r+0x8d8>
 8003980:	2c00      	cmp	r4, #0
 8003982:	dd10      	ble.n	80039a6 <_dtoa_r+0x7ae>
 8003984:	4631      	mov	r1, r6
 8003986:	4622      	mov	r2, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 fbff 	bl	800418c <__pow5mult>
 800398e:	465a      	mov	r2, fp
 8003990:	4601      	mov	r1, r0
 8003992:	4606      	mov	r6, r0
 8003994:	4628      	mov	r0, r5
 8003996:	f000 fb51 	bl	800403c <__multiply>
 800399a:	4680      	mov	r8, r0
 800399c:	4659      	mov	r1, fp
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 fa80 	bl	8003ea4 <_Bfree>
 80039a4:	46c3      	mov	fp, r8
 80039a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a8:	1b1a      	subs	r2, r3, r4
 80039aa:	d004      	beq.n	80039b6 <_dtoa_r+0x7be>
 80039ac:	4659      	mov	r1, fp
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 fbec 	bl	800418c <__pow5mult>
 80039b4:	4683      	mov	fp, r0
 80039b6:	2101      	movs	r1, #1
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 fb29 	bl	8004010 <__i2b>
 80039be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039c0:	4604      	mov	r4, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f340 8086 	ble.w	8003ad4 <_dtoa_r+0x8dc>
 80039c8:	461a      	mov	r2, r3
 80039ca:	4601      	mov	r1, r0
 80039cc:	4628      	mov	r0, r5
 80039ce:	f000 fbdd 	bl	800418c <__pow5mult>
 80039d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039d4:	4604      	mov	r4, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	dd7f      	ble.n	8003ada <_dtoa_r+0x8e2>
 80039da:	f04f 0800 	mov.w	r8, #0
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80039e4:	6918      	ldr	r0, [r3, #16]
 80039e6:	f000 fac5 	bl	8003f74 <__hi0bits>
 80039ea:	f1c0 0020 	rsb	r0, r0, #32
 80039ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f0:	4418      	add	r0, r3
 80039f2:	f010 001f 	ands.w	r0, r0, #31
 80039f6:	f000 8092 	beq.w	8003b1e <_dtoa_r+0x926>
 80039fa:	f1c0 0320 	rsb	r3, r0, #32
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	f340 808a 	ble.w	8003b18 <_dtoa_r+0x920>
 8003a04:	f1c0 001c 	rsb	r0, r0, #28
 8003a08:	9b06      	ldr	r3, [sp, #24]
 8003a0a:	4407      	add	r7, r0
 8003a0c:	4403      	add	r3, r0
 8003a0e:	9306      	str	r3, [sp, #24]
 8003a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a12:	4403      	add	r3, r0
 8003a14:	9309      	str	r3, [sp, #36]	; 0x24
 8003a16:	9b06      	ldr	r3, [sp, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dd05      	ble.n	8003a28 <_dtoa_r+0x830>
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4628      	mov	r0, r5
 8003a22:	f000 fc0d 	bl	8004240 <__lshift>
 8003a26:	4683      	mov	fp, r0
 8003a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dd05      	ble.n	8003a3a <_dtoa_r+0x842>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	461a      	mov	r2, r3
 8003a32:	4628      	mov	r0, r5
 8003a34:	f000 fc04 	bl	8004240 <__lshift>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d070      	beq.n	8003b22 <_dtoa_r+0x92a>
 8003a40:	4621      	mov	r1, r4
 8003a42:	4658      	mov	r0, fp
 8003a44:	f000 fc6c 	bl	8004320 <__mcmp>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	da6a      	bge.n	8003b22 <_dtoa_r+0x92a>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4659      	mov	r1, fp
 8003a50:	220a      	movs	r2, #10
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 fa48 	bl	8003ee8 <__multadd>
 8003a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a5a:	4683      	mov	fp, r0
 8003a5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8194 	beq.w	8003d8e <_dtoa_r+0xb96>
 8003a66:	4631      	mov	r1, r6
 8003a68:	2300      	movs	r3, #0
 8003a6a:	220a      	movs	r2, #10
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 fa3b 	bl	8003ee8 <__multadd>
 8003a72:	f1b9 0f00 	cmp.w	r9, #0
 8003a76:	4606      	mov	r6, r0
 8003a78:	f300 8093 	bgt.w	8003ba2 <_dtoa_r+0x9aa>
 8003a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	dc57      	bgt.n	8003b32 <_dtoa_r+0x93a>
 8003a82:	e08e      	b.n	8003ba2 <_dtoa_r+0x9aa>
 8003a84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a8a:	e757      	b.n	800393c <_dtoa_r+0x744>
 8003a8c:	9b08      	ldr	r3, [sp, #32]
 8003a8e:	1e5c      	subs	r4, r3, #1
 8003a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a92:	42a3      	cmp	r3, r4
 8003a94:	bfb7      	itett	lt
 8003a96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003a98:	1b1c      	subge	r4, r3, r4
 8003a9a:	1ae2      	sublt	r2, r4, r3
 8003a9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003a9e:	bfbe      	ittt	lt
 8003aa0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003aa2:	189b      	addlt	r3, r3, r2
 8003aa4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003aa6:	9b08      	ldr	r3, [sp, #32]
 8003aa8:	bfb8      	it	lt
 8003aaa:	2400      	movlt	r4, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bfbb      	ittet	lt
 8003ab0:	9b06      	ldrlt	r3, [sp, #24]
 8003ab2:	9a08      	ldrlt	r2, [sp, #32]
 8003ab4:	9f06      	ldrge	r7, [sp, #24]
 8003ab6:	1a9f      	sublt	r7, r3, r2
 8003ab8:	bfac      	ite	ge
 8003aba:	9b08      	ldrge	r3, [sp, #32]
 8003abc:	2300      	movlt	r3, #0
 8003abe:	e73f      	b.n	8003940 <_dtoa_r+0x748>
 8003ac0:	3fe00000 	.word	0x3fe00000
 8003ac4:	40240000 	.word	0x40240000
 8003ac8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003aca:	9f06      	ldr	r7, [sp, #24]
 8003acc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003ace:	e742      	b.n	8003956 <_dtoa_r+0x75e>
 8003ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ad2:	e76b      	b.n	80039ac <_dtoa_r+0x7b4>
 8003ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	dc19      	bgt.n	8003b0e <_dtoa_r+0x916>
 8003ada:	9b04      	ldr	r3, [sp, #16]
 8003adc:	b9bb      	cbnz	r3, 8003b0e <_dtoa_r+0x916>
 8003ade:	9b05      	ldr	r3, [sp, #20]
 8003ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae4:	b99b      	cbnz	r3, 8003b0e <_dtoa_r+0x916>
 8003ae6:	9b05      	ldr	r3, [sp, #20]
 8003ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	0d1b      	lsrs	r3, r3, #20
 8003aee:	051b      	lsls	r3, r3, #20
 8003af0:	b183      	cbz	r3, 8003b14 <_dtoa_r+0x91c>
 8003af2:	f04f 0801 	mov.w	r8, #1
 8003af6:	9b06      	ldr	r3, [sp, #24]
 8003af8:	3301      	adds	r3, #1
 8003afa:	9306      	str	r3, [sp, #24]
 8003afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afe:	3301      	adds	r3, #1
 8003b00:	9309      	str	r3, [sp, #36]	; 0x24
 8003b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af6a 	bne.w	80039de <_dtoa_r+0x7e6>
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	e76f      	b.n	80039ee <_dtoa_r+0x7f6>
 8003b0e:	f04f 0800 	mov.w	r8, #0
 8003b12:	e7f6      	b.n	8003b02 <_dtoa_r+0x90a>
 8003b14:	4698      	mov	r8, r3
 8003b16:	e7f4      	b.n	8003b02 <_dtoa_r+0x90a>
 8003b18:	f43f af7d 	beq.w	8003a16 <_dtoa_r+0x81e>
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	301c      	adds	r0, #28
 8003b20:	e772      	b.n	8003a08 <_dtoa_r+0x810>
 8003b22:	9b08      	ldr	r3, [sp, #32]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dc36      	bgt.n	8003b96 <_dtoa_r+0x99e>
 8003b28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	dd33      	ble.n	8003b96 <_dtoa_r+0x99e>
 8003b2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b32:	f1b9 0f00 	cmp.w	r9, #0
 8003b36:	d10d      	bne.n	8003b54 <_dtoa_r+0x95c>
 8003b38:	4621      	mov	r1, r4
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 f9d2 	bl	8003ee8 <__multadd>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4604      	mov	r4, r0
 8003b48:	4658      	mov	r0, fp
 8003b4a:	f000 fbe9 	bl	8004320 <__mcmp>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f73f adb8 	bgt.w	80036c4 <_dtoa_r+0x4cc>
 8003b54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b56:	9f03      	ldr	r7, [sp, #12]
 8003b58:	ea6f 0a03 	mvn.w	sl, r3
 8003b5c:	f04f 0800 	mov.w	r8, #0
 8003b60:	4621      	mov	r1, r4
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 f99e 	bl	8003ea4 <_Bfree>
 8003b68:	2e00      	cmp	r6, #0
 8003b6a:	f43f aea7 	beq.w	80038bc <_dtoa_r+0x6c4>
 8003b6e:	f1b8 0f00 	cmp.w	r8, #0
 8003b72:	d005      	beq.n	8003b80 <_dtoa_r+0x988>
 8003b74:	45b0      	cmp	r8, r6
 8003b76:	d003      	beq.n	8003b80 <_dtoa_r+0x988>
 8003b78:	4641      	mov	r1, r8
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f992 	bl	8003ea4 <_Bfree>
 8003b80:	4631      	mov	r1, r6
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 f98e 	bl	8003ea4 <_Bfree>
 8003b88:	e698      	b.n	80038bc <_dtoa_r+0x6c4>
 8003b8a:	2400      	movs	r4, #0
 8003b8c:	4626      	mov	r6, r4
 8003b8e:	e7e1      	b.n	8003b54 <_dtoa_r+0x95c>
 8003b90:	46c2      	mov	sl, r8
 8003b92:	4626      	mov	r6, r4
 8003b94:	e596      	b.n	80036c4 <_dtoa_r+0x4cc>
 8003b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80fd 	beq.w	8003d9c <_dtoa_r+0xba4>
 8003ba2:	2f00      	cmp	r7, #0
 8003ba4:	dd05      	ble.n	8003bb2 <_dtoa_r+0x9ba>
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	463a      	mov	r2, r7
 8003baa:	4628      	mov	r0, r5
 8003bac:	f000 fb48 	bl	8004240 <__lshift>
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	d05c      	beq.n	8003c72 <_dtoa_r+0xa7a>
 8003bb8:	4628      	mov	r0, r5
 8003bba:	6871      	ldr	r1, [r6, #4]
 8003bbc:	f000 f932 	bl	8003e24 <_Balloc>
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	b928      	cbnz	r0, 8003bd0 <_dtoa_r+0x9d8>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003bca:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <_dtoa_r+0xbd0>)
 8003bcc:	f7ff bb28 	b.w	8003220 <_dtoa_r+0x28>
 8003bd0:	6932      	ldr	r2, [r6, #16]
 8003bd2:	f106 010c 	add.w	r1, r6, #12
 8003bd6:	3202      	adds	r2, #2
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	300c      	adds	r0, #12
 8003bdc:	f000 f914 	bl	8003e08 <memcpy>
 8003be0:	2201      	movs	r2, #1
 8003be2:	4639      	mov	r1, r7
 8003be4:	4628      	mov	r0, r5
 8003be6:	f000 fb2b 	bl	8004240 <__lshift>
 8003bea:	46b0      	mov	r8, r6
 8003bec:	4606      	mov	r6, r0
 8003bee:	9b03      	ldr	r3, [sp, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	9308      	str	r3, [sp, #32]
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	444b      	add	r3, r9
 8003bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8003bfa:	9b04      	ldr	r3, [sp, #16]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	9309      	str	r3, [sp, #36]	; 0x24
 8003c02:	9b08      	ldr	r3, [sp, #32]
 8003c04:	4621      	mov	r1, r4
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4658      	mov	r0, fp
 8003c0a:	9304      	str	r3, [sp, #16]
 8003c0c:	f7ff fa68 	bl	80030e0 <quorem>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4641      	mov	r1, r8
 8003c14:	3330      	adds	r3, #48	; 0x30
 8003c16:	9006      	str	r0, [sp, #24]
 8003c18:	4658      	mov	r0, fp
 8003c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c1c:	f000 fb80 	bl	8004320 <__mcmp>
 8003c20:	4632      	mov	r2, r6
 8003c22:	4681      	mov	r9, r0
 8003c24:	4621      	mov	r1, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 fb96 	bl	8004358 <__mdiff>
 8003c2c:	68c2      	ldr	r2, [r0, #12]
 8003c2e:	4607      	mov	r7, r0
 8003c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c32:	bb02      	cbnz	r2, 8003c76 <_dtoa_r+0xa7e>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4658      	mov	r0, fp
 8003c38:	f000 fb72 	bl	8004320 <__mcmp>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c40:	4639      	mov	r1, r7
 8003c42:	4628      	mov	r0, r5
 8003c44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003c48:	f000 f92c 	bl	8003ea4 <_Bfree>
 8003c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c50:	9f08      	ldr	r7, [sp, #32]
 8003c52:	ea43 0102 	orr.w	r1, r3, r2
 8003c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c5c:	d10d      	bne.n	8003c7a <_dtoa_r+0xa82>
 8003c5e:	2b39      	cmp	r3, #57	; 0x39
 8003c60:	d029      	beq.n	8003cb6 <_dtoa_r+0xabe>
 8003c62:	f1b9 0f00 	cmp.w	r9, #0
 8003c66:	dd01      	ble.n	8003c6c <_dtoa_r+0xa74>
 8003c68:	9b06      	ldr	r3, [sp, #24]
 8003c6a:	3331      	adds	r3, #49	; 0x31
 8003c6c:	9a04      	ldr	r2, [sp, #16]
 8003c6e:	7013      	strb	r3, [r2, #0]
 8003c70:	e776      	b.n	8003b60 <_dtoa_r+0x968>
 8003c72:	4630      	mov	r0, r6
 8003c74:	e7b9      	b.n	8003bea <_dtoa_r+0x9f2>
 8003c76:	2201      	movs	r2, #1
 8003c78:	e7e2      	b.n	8003c40 <_dtoa_r+0xa48>
 8003c7a:	f1b9 0f00 	cmp.w	r9, #0
 8003c7e:	db06      	blt.n	8003c8e <_dtoa_r+0xa96>
 8003c80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003c82:	ea41 0909 	orr.w	r9, r1, r9
 8003c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c88:	ea59 0101 	orrs.w	r1, r9, r1
 8003c8c:	d120      	bne.n	8003cd0 <_dtoa_r+0xad8>
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	ddec      	ble.n	8003c6c <_dtoa_r+0xa74>
 8003c92:	4659      	mov	r1, fp
 8003c94:	2201      	movs	r2, #1
 8003c96:	4628      	mov	r0, r5
 8003c98:	9308      	str	r3, [sp, #32]
 8003c9a:	f000 fad1 	bl	8004240 <__lshift>
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4683      	mov	fp, r0
 8003ca2:	f000 fb3d 	bl	8004320 <__mcmp>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	9b08      	ldr	r3, [sp, #32]
 8003caa:	dc02      	bgt.n	8003cb2 <_dtoa_r+0xaba>
 8003cac:	d1de      	bne.n	8003c6c <_dtoa_r+0xa74>
 8003cae:	07da      	lsls	r2, r3, #31
 8003cb0:	d5dc      	bpl.n	8003c6c <_dtoa_r+0xa74>
 8003cb2:	2b39      	cmp	r3, #57	; 0x39
 8003cb4:	d1d8      	bne.n	8003c68 <_dtoa_r+0xa70>
 8003cb6:	2339      	movs	r3, #57	; 0x39
 8003cb8:	9a04      	ldr	r2, [sp, #16]
 8003cba:	7013      	strb	r3, [r2, #0]
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	461f      	mov	r7, r3
 8003cc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	2a39      	cmp	r2, #57	; 0x39
 8003cc8:	d050      	beq.n	8003d6c <_dtoa_r+0xb74>
 8003cca:	3201      	adds	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e747      	b.n	8003b60 <_dtoa_r+0x968>
 8003cd0:	2a00      	cmp	r2, #0
 8003cd2:	dd03      	ble.n	8003cdc <_dtoa_r+0xae4>
 8003cd4:	2b39      	cmp	r3, #57	; 0x39
 8003cd6:	d0ee      	beq.n	8003cb6 <_dtoa_r+0xabe>
 8003cd8:	3301      	adds	r3, #1
 8003cda:	e7c7      	b.n	8003c6c <_dtoa_r+0xa74>
 8003cdc:	9a08      	ldr	r2, [sp, #32]
 8003cde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ce0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ce4:	428a      	cmp	r2, r1
 8003ce6:	d02a      	beq.n	8003d3e <_dtoa_r+0xb46>
 8003ce8:	4659      	mov	r1, fp
 8003cea:	2300      	movs	r3, #0
 8003cec:	220a      	movs	r2, #10
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f8fa 	bl	8003ee8 <__multadd>
 8003cf4:	45b0      	cmp	r8, r6
 8003cf6:	4683      	mov	fp, r0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 020a 	mov.w	r2, #10
 8003d00:	4641      	mov	r1, r8
 8003d02:	4628      	mov	r0, r5
 8003d04:	d107      	bne.n	8003d16 <_dtoa_r+0xb1e>
 8003d06:	f000 f8ef 	bl	8003ee8 <__multadd>
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	9b08      	ldr	r3, [sp, #32]
 8003d10:	3301      	adds	r3, #1
 8003d12:	9308      	str	r3, [sp, #32]
 8003d14:	e775      	b.n	8003c02 <_dtoa_r+0xa0a>
 8003d16:	f000 f8e7 	bl	8003ee8 <__multadd>
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	4680      	mov	r8, r0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	220a      	movs	r2, #10
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 f8e0 	bl	8003ee8 <__multadd>
 8003d28:	4606      	mov	r6, r0
 8003d2a:	e7f0      	b.n	8003d0e <_dtoa_r+0xb16>
 8003d2c:	f1b9 0f00 	cmp.w	r9, #0
 8003d30:	bfcc      	ite	gt
 8003d32:	464f      	movgt	r7, r9
 8003d34:	2701      	movle	r7, #1
 8003d36:	f04f 0800 	mov.w	r8, #0
 8003d3a:	9a03      	ldr	r2, [sp, #12]
 8003d3c:	4417      	add	r7, r2
 8003d3e:	4659      	mov	r1, fp
 8003d40:	2201      	movs	r2, #1
 8003d42:	4628      	mov	r0, r5
 8003d44:	9308      	str	r3, [sp, #32]
 8003d46:	f000 fa7b 	bl	8004240 <__lshift>
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4683      	mov	fp, r0
 8003d4e:	f000 fae7 	bl	8004320 <__mcmp>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	dcb2      	bgt.n	8003cbc <_dtoa_r+0xac4>
 8003d56:	d102      	bne.n	8003d5e <_dtoa_r+0xb66>
 8003d58:	9b08      	ldr	r3, [sp, #32]
 8003d5a:	07db      	lsls	r3, r3, #31
 8003d5c:	d4ae      	bmi.n	8003cbc <_dtoa_r+0xac4>
 8003d5e:	463b      	mov	r3, r7
 8003d60:	461f      	mov	r7, r3
 8003d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d66:	2a30      	cmp	r2, #48	; 0x30
 8003d68:	d0fa      	beq.n	8003d60 <_dtoa_r+0xb68>
 8003d6a:	e6f9      	b.n	8003b60 <_dtoa_r+0x968>
 8003d6c:	9a03      	ldr	r2, [sp, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1a5      	bne.n	8003cbe <_dtoa_r+0xac6>
 8003d72:	2331      	movs	r3, #49	; 0x31
 8003d74:	f10a 0a01 	add.w	sl, sl, #1
 8003d78:	e779      	b.n	8003c6e <_dtoa_r+0xa76>
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <_dtoa_r+0xbd4>)
 8003d7c:	f7ff baa8 	b.w	80032d0 <_dtoa_r+0xd8>
 8003d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f47f aa81 	bne.w	800328a <_dtoa_r+0x92>
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_dtoa_r+0xbd8>)
 8003d8a:	f7ff baa1 	b.w	80032d0 <_dtoa_r+0xd8>
 8003d8e:	f1b9 0f00 	cmp.w	r9, #0
 8003d92:	dc03      	bgt.n	8003d9c <_dtoa_r+0xba4>
 8003d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	f73f aecb 	bgt.w	8003b32 <_dtoa_r+0x93a>
 8003d9c:	9f03      	ldr	r7, [sp, #12]
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4658      	mov	r0, fp
 8003da2:	f7ff f99d 	bl	80030e0 <quorem>
 8003da6:	9a03      	ldr	r2, [sp, #12]
 8003da8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003dac:	f807 3b01 	strb.w	r3, [r7], #1
 8003db0:	1aba      	subs	r2, r7, r2
 8003db2:	4591      	cmp	r9, r2
 8003db4:	ddba      	ble.n	8003d2c <_dtoa_r+0xb34>
 8003db6:	4659      	mov	r1, fp
 8003db8:	2300      	movs	r3, #0
 8003dba:	220a      	movs	r2, #10
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f893 	bl	8003ee8 <__multadd>
 8003dc2:	4683      	mov	fp, r0
 8003dc4:	e7eb      	b.n	8003d9e <_dtoa_r+0xba6>
 8003dc6:	bf00      	nop
 8003dc8:	0800533f 	.word	0x0800533f
 8003dcc:	0800529c 	.word	0x0800529c
 8003dd0:	080052c0 	.word	0x080052c0

08003dd4 <_localeconv_r>:
 8003dd4:	4800      	ldr	r0, [pc, #0]	; (8003dd8 <_localeconv_r+0x4>)
 8003dd6:	4770      	bx	lr
 8003dd8:	20000160 	.word	0x20000160

08003ddc <malloc>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <malloc+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f000 bc1d 	b.w	8004620 <_malloc_r>
 8003de6:	bf00      	nop
 8003de8:	2000000c 	.word	0x2000000c

08003dec <memchr>:
 8003dec:	4603      	mov	r3, r0
 8003dee:	b510      	push	{r4, lr}
 8003df0:	b2c9      	uxtb	r1, r1
 8003df2:	4402      	add	r2, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	d101      	bne.n	8003dfe <memchr+0x12>
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	e003      	b.n	8003e06 <memchr+0x1a>
 8003dfe:	7804      	ldrb	r4, [r0, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	428c      	cmp	r4, r1
 8003e04:	d1f6      	bne.n	8003df4 <memchr+0x8>
 8003e06:	bd10      	pop	{r4, pc}

08003e08 <memcpy>:
 8003e08:	440a      	add	r2, r1
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e10:	d100      	bne.n	8003e14 <memcpy+0xc>
 8003e12:	4770      	bx	lr
 8003e14:	b510      	push	{r4, lr}
 8003e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e20:	d1f9      	bne.n	8003e16 <memcpy+0xe>
 8003e22:	bd10      	pop	{r4, pc}

08003e24 <_Balloc>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e28:	4604      	mov	r4, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	b976      	cbnz	r6, 8003e4c <_Balloc+0x28>
 8003e2e:	2010      	movs	r0, #16
 8003e30:	f7ff ffd4 	bl	8003ddc <malloc>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6260      	str	r0, [r4, #36]	; 0x24
 8003e38:	b920      	cbnz	r0, 8003e44 <_Balloc+0x20>
 8003e3a:	2166      	movs	r1, #102	; 0x66
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <_Balloc+0x78>)
 8003e3e:	4818      	ldr	r0, [pc, #96]	; (8003ea0 <_Balloc+0x7c>)
 8003e40:	f000 fc72 	bl	8004728 <__assert_func>
 8003e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e48:	6006      	str	r6, [r0, #0]
 8003e4a:	60c6      	str	r6, [r0, #12]
 8003e4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e4e:	68f3      	ldr	r3, [r6, #12]
 8003e50:	b183      	cbz	r3, 8003e74 <_Balloc+0x50>
 8003e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003e5a:	b9b8      	cbnz	r0, 8003e8c <_Balloc+0x68>
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8003e62:	1d72      	adds	r2, r6, #5
 8003e64:	4620      	mov	r0, r4
 8003e66:	0092      	lsls	r2, r2, #2
 8003e68:	f000 fb5e 	bl	8004528 <_calloc_r>
 8003e6c:	b160      	cbz	r0, 8003e88 <_Balloc+0x64>
 8003e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e72:	e00e      	b.n	8003e92 <_Balloc+0x6e>
 8003e74:	2221      	movs	r2, #33	; 0x21
 8003e76:	2104      	movs	r1, #4
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 fb55 	bl	8004528 <_calloc_r>
 8003e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e80:	60f0      	str	r0, [r6, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e4      	bne.n	8003e52 <_Balloc+0x2e>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	6802      	ldr	r2, [r0, #0]
 8003e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e92:	2300      	movs	r3, #0
 8003e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e98:	e7f7      	b.n	8003e8a <_Balloc+0x66>
 8003e9a:	bf00      	nop
 8003e9c:	080052cd 	.word	0x080052cd
 8003ea0:	08005350 	.word	0x08005350

08003ea4 <_Bfree>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	b976      	cbnz	r6, 8003ecc <_Bfree+0x28>
 8003eae:	2010      	movs	r0, #16
 8003eb0:	f7ff ff94 	bl	8003ddc <malloc>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6268      	str	r0, [r5, #36]	; 0x24
 8003eb8:	b920      	cbnz	r0, 8003ec4 <_Bfree+0x20>
 8003eba:	218a      	movs	r1, #138	; 0x8a
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <_Bfree+0x3c>)
 8003ebe:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <_Bfree+0x40>)
 8003ec0:	f000 fc32 	bl	8004728 <__assert_func>
 8003ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ec8:	6006      	str	r6, [r0, #0]
 8003eca:	60c6      	str	r6, [r0, #12]
 8003ecc:	b13c      	cbz	r4, 8003ede <_Bfree+0x3a>
 8003ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ed0:	6862      	ldr	r2, [r4, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ed8:	6021      	str	r1, [r4, #0]
 8003eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	080052cd 	.word	0x080052cd
 8003ee4:	08005350 	.word	0x08005350

08003ee8 <__multadd>:
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	4607      	mov	r7, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	461e      	mov	r6, r3
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	690d      	ldr	r5, [r1, #16]
 8003ef6:	f101 0c14 	add.w	ip, r1, #20
 8003efa:	f8dc 3000 	ldr.w	r3, [ip]
 8003efe:	3001      	adds	r0, #1
 8003f00:	b299      	uxth	r1, r3
 8003f02:	fb02 6101 	mla	r1, r2, r1, r6
 8003f06:	0c1e      	lsrs	r6, r3, #16
 8003f08:	0c0b      	lsrs	r3, r1, #16
 8003f0a:	fb02 3306 	mla	r3, r2, r6, r3
 8003f0e:	b289      	uxth	r1, r1
 8003f10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003f14:	4285      	cmp	r5, r0
 8003f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8003f1e:	dcec      	bgt.n	8003efa <__multadd+0x12>
 8003f20:	b30e      	cbz	r6, 8003f66 <__multadd+0x7e>
 8003f22:	68a3      	ldr	r3, [r4, #8]
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	dc19      	bgt.n	8003f5c <__multadd+0x74>
 8003f28:	6861      	ldr	r1, [r4, #4]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	3101      	adds	r1, #1
 8003f2e:	f7ff ff79 	bl	8003e24 <_Balloc>
 8003f32:	4680      	mov	r8, r0
 8003f34:	b928      	cbnz	r0, 8003f42 <__multadd+0x5a>
 8003f36:	4602      	mov	r2, r0
 8003f38:	21b5      	movs	r1, #181	; 0xb5
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <__multadd+0x84>)
 8003f3c:	480c      	ldr	r0, [pc, #48]	; (8003f70 <__multadd+0x88>)
 8003f3e:	f000 fbf3 	bl	8004728 <__assert_func>
 8003f42:	6922      	ldr	r2, [r4, #16]
 8003f44:	f104 010c 	add.w	r1, r4, #12
 8003f48:	3202      	adds	r2, #2
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	300c      	adds	r0, #12
 8003f4e:	f7ff ff5b 	bl	8003e08 <memcpy>
 8003f52:	4621      	mov	r1, r4
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7ff ffa5 	bl	8003ea4 <_Bfree>
 8003f5a:	4644      	mov	r4, r8
 8003f5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f60:	3501      	adds	r5, #1
 8003f62:	615e      	str	r6, [r3, #20]
 8003f64:	6125      	str	r5, [r4, #16]
 8003f66:	4620      	mov	r0, r4
 8003f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6c:	0800533f 	.word	0x0800533f
 8003f70:	08005350 	.word	0x08005350

08003f74 <__hi0bits>:
 8003f74:	0c02      	lsrs	r2, r0, #16
 8003f76:	0412      	lsls	r2, r2, #16
 8003f78:	4603      	mov	r3, r0
 8003f7a:	b9ca      	cbnz	r2, 8003fb0 <__hi0bits+0x3c>
 8003f7c:	0403      	lsls	r3, r0, #16
 8003f7e:	2010      	movs	r0, #16
 8003f80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003f84:	bf04      	itt	eq
 8003f86:	021b      	lsleq	r3, r3, #8
 8003f88:	3008      	addeq	r0, #8
 8003f8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003f8e:	bf04      	itt	eq
 8003f90:	011b      	lsleq	r3, r3, #4
 8003f92:	3004      	addeq	r0, #4
 8003f94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003f98:	bf04      	itt	eq
 8003f9a:	009b      	lsleq	r3, r3, #2
 8003f9c:	3002      	addeq	r0, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db05      	blt.n	8003fae <__hi0bits+0x3a>
 8003fa2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003fa6:	f100 0001 	add.w	r0, r0, #1
 8003faa:	bf08      	it	eq
 8003fac:	2020      	moveq	r0, #32
 8003fae:	4770      	bx	lr
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7e5      	b.n	8003f80 <__hi0bits+0xc>

08003fb4 <__lo0bits>:
 8003fb4:	6803      	ldr	r3, [r0, #0]
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f013 0007 	ands.w	r0, r3, #7
 8003fbc:	d00b      	beq.n	8003fd6 <__lo0bits+0x22>
 8003fbe:	07d9      	lsls	r1, r3, #31
 8003fc0:	d421      	bmi.n	8004006 <__lo0bits+0x52>
 8003fc2:	0798      	lsls	r0, r3, #30
 8003fc4:	bf49      	itett	mi
 8003fc6:	085b      	lsrmi	r3, r3, #1
 8003fc8:	089b      	lsrpl	r3, r3, #2
 8003fca:	2001      	movmi	r0, #1
 8003fcc:	6013      	strmi	r3, [r2, #0]
 8003fce:	bf5c      	itt	pl
 8003fd0:	2002      	movpl	r0, #2
 8003fd2:	6013      	strpl	r3, [r2, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	b299      	uxth	r1, r3
 8003fd8:	b909      	cbnz	r1, 8003fde <__lo0bits+0x2a>
 8003fda:	2010      	movs	r0, #16
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	b2d9      	uxtb	r1, r3
 8003fe0:	b909      	cbnz	r1, 8003fe6 <__lo0bits+0x32>
 8003fe2:	3008      	adds	r0, #8
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	0719      	lsls	r1, r3, #28
 8003fe8:	bf04      	itt	eq
 8003fea:	091b      	lsreq	r3, r3, #4
 8003fec:	3004      	addeq	r0, #4
 8003fee:	0799      	lsls	r1, r3, #30
 8003ff0:	bf04      	itt	eq
 8003ff2:	089b      	lsreq	r3, r3, #2
 8003ff4:	3002      	addeq	r0, #2
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	d403      	bmi.n	8004002 <__lo0bits+0x4e>
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	f100 0001 	add.w	r0, r0, #1
 8004000:	d003      	beq.n	800400a <__lo0bits+0x56>
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4770      	bx	lr
 8004006:	2000      	movs	r0, #0
 8004008:	4770      	bx	lr
 800400a:	2020      	movs	r0, #32
 800400c:	4770      	bx	lr
	...

08004010 <__i2b>:
 8004010:	b510      	push	{r4, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	2101      	movs	r1, #1
 8004016:	f7ff ff05 	bl	8003e24 <_Balloc>
 800401a:	4602      	mov	r2, r0
 800401c:	b928      	cbnz	r0, 800402a <__i2b+0x1a>
 800401e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <__i2b+0x24>)
 8004024:	4804      	ldr	r0, [pc, #16]	; (8004038 <__i2b+0x28>)
 8004026:	f000 fb7f 	bl	8004728 <__assert_func>
 800402a:	2301      	movs	r3, #1
 800402c:	6144      	str	r4, [r0, #20]
 800402e:	6103      	str	r3, [r0, #16]
 8004030:	bd10      	pop	{r4, pc}
 8004032:	bf00      	nop
 8004034:	0800533f 	.word	0x0800533f
 8004038:	08005350 	.word	0x08005350

0800403c <__multiply>:
 800403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004040:	4691      	mov	r9, r2
 8004042:	690a      	ldr	r2, [r1, #16]
 8004044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004048:	460c      	mov	r4, r1
 800404a:	429a      	cmp	r2, r3
 800404c:	bfbe      	ittt	lt
 800404e:	460b      	movlt	r3, r1
 8004050:	464c      	movlt	r4, r9
 8004052:	4699      	movlt	r9, r3
 8004054:	6927      	ldr	r7, [r4, #16]
 8004056:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800405a:	68a3      	ldr	r3, [r4, #8]
 800405c:	6861      	ldr	r1, [r4, #4]
 800405e:	eb07 060a 	add.w	r6, r7, sl
 8004062:	42b3      	cmp	r3, r6
 8004064:	b085      	sub	sp, #20
 8004066:	bfb8      	it	lt
 8004068:	3101      	addlt	r1, #1
 800406a:	f7ff fedb 	bl	8003e24 <_Balloc>
 800406e:	b930      	cbnz	r0, 800407e <__multiply+0x42>
 8004070:	4602      	mov	r2, r0
 8004072:	f240 115d 	movw	r1, #349	; 0x15d
 8004076:	4b43      	ldr	r3, [pc, #268]	; (8004184 <__multiply+0x148>)
 8004078:	4843      	ldr	r0, [pc, #268]	; (8004188 <__multiply+0x14c>)
 800407a:	f000 fb55 	bl	8004728 <__assert_func>
 800407e:	f100 0514 	add.w	r5, r0, #20
 8004082:	462b      	mov	r3, r5
 8004084:	2200      	movs	r2, #0
 8004086:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800408a:	4543      	cmp	r3, r8
 800408c:	d321      	bcc.n	80040d2 <__multiply+0x96>
 800408e:	f104 0314 	add.w	r3, r4, #20
 8004092:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004096:	f109 0314 	add.w	r3, r9, #20
 800409a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800409e:	9202      	str	r2, [sp, #8]
 80040a0:	1b3a      	subs	r2, r7, r4
 80040a2:	3a15      	subs	r2, #21
 80040a4:	f022 0203 	bic.w	r2, r2, #3
 80040a8:	3204      	adds	r2, #4
 80040aa:	f104 0115 	add.w	r1, r4, #21
 80040ae:	428f      	cmp	r7, r1
 80040b0:	bf38      	it	cc
 80040b2:	2204      	movcc	r2, #4
 80040b4:	9201      	str	r2, [sp, #4]
 80040b6:	9a02      	ldr	r2, [sp, #8]
 80040b8:	9303      	str	r3, [sp, #12]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d80c      	bhi.n	80040d8 <__multiply+0x9c>
 80040be:	2e00      	cmp	r6, #0
 80040c0:	dd03      	ble.n	80040ca <__multiply+0x8e>
 80040c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d059      	beq.n	800417e <__multiply+0x142>
 80040ca:	6106      	str	r6, [r0, #16]
 80040cc:	b005      	add	sp, #20
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	f843 2b04 	str.w	r2, [r3], #4
 80040d6:	e7d8      	b.n	800408a <__multiply+0x4e>
 80040d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80040dc:	f1ba 0f00 	cmp.w	sl, #0
 80040e0:	d023      	beq.n	800412a <__multiply+0xee>
 80040e2:	46a9      	mov	r9, r5
 80040e4:	f04f 0c00 	mov.w	ip, #0
 80040e8:	f104 0e14 	add.w	lr, r4, #20
 80040ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80040f0:	f8d9 1000 	ldr.w	r1, [r9]
 80040f4:	fa1f fb82 	uxth.w	fp, r2
 80040f8:	b289      	uxth	r1, r1
 80040fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80040fe:	4461      	add	r1, ip
 8004100:	f8d9 c000 	ldr.w	ip, [r9]
 8004104:	0c12      	lsrs	r2, r2, #16
 8004106:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800410a:	fb0a c202 	mla	r2, sl, r2, ip
 800410e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004112:	b289      	uxth	r1, r1
 8004114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004118:	4577      	cmp	r7, lr
 800411a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800411e:	f849 1b04 	str.w	r1, [r9], #4
 8004122:	d8e3      	bhi.n	80040ec <__multiply+0xb0>
 8004124:	9a01      	ldr	r2, [sp, #4]
 8004126:	f845 c002 	str.w	ip, [r5, r2]
 800412a:	9a03      	ldr	r2, [sp, #12]
 800412c:	3304      	adds	r3, #4
 800412e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004132:	f1b9 0f00 	cmp.w	r9, #0
 8004136:	d020      	beq.n	800417a <__multiply+0x13e>
 8004138:	46ae      	mov	lr, r5
 800413a:	f04f 0a00 	mov.w	sl, #0
 800413e:	6829      	ldr	r1, [r5, #0]
 8004140:	f104 0c14 	add.w	ip, r4, #20
 8004144:	f8bc b000 	ldrh.w	fp, [ip]
 8004148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800414c:	b289      	uxth	r1, r1
 800414e:	fb09 220b 	mla	r2, r9, fp, r2
 8004152:	4492      	add	sl, r2
 8004154:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004158:	f84e 1b04 	str.w	r1, [lr], #4
 800415c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004160:	f8be 1000 	ldrh.w	r1, [lr]
 8004164:	0c12      	lsrs	r2, r2, #16
 8004166:	fb09 1102 	mla	r1, r9, r2, r1
 800416a:	4567      	cmp	r7, ip
 800416c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004174:	d8e6      	bhi.n	8004144 <__multiply+0x108>
 8004176:	9a01      	ldr	r2, [sp, #4]
 8004178:	50a9      	str	r1, [r5, r2]
 800417a:	3504      	adds	r5, #4
 800417c:	e79b      	b.n	80040b6 <__multiply+0x7a>
 800417e:	3e01      	subs	r6, #1
 8004180:	e79d      	b.n	80040be <__multiply+0x82>
 8004182:	bf00      	nop
 8004184:	0800533f 	.word	0x0800533f
 8004188:	08005350 	.word	0x08005350

0800418c <__pow5mult>:
 800418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004190:	4615      	mov	r5, r2
 8004192:	f012 0203 	ands.w	r2, r2, #3
 8004196:	4606      	mov	r6, r0
 8004198:	460f      	mov	r7, r1
 800419a:	d007      	beq.n	80041ac <__pow5mult+0x20>
 800419c:	4c25      	ldr	r4, [pc, #148]	; (8004234 <__pow5mult+0xa8>)
 800419e:	3a01      	subs	r2, #1
 80041a0:	2300      	movs	r3, #0
 80041a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041a6:	f7ff fe9f 	bl	8003ee8 <__multadd>
 80041aa:	4607      	mov	r7, r0
 80041ac:	10ad      	asrs	r5, r5, #2
 80041ae:	d03d      	beq.n	800422c <__pow5mult+0xa0>
 80041b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80041b2:	b97c      	cbnz	r4, 80041d4 <__pow5mult+0x48>
 80041b4:	2010      	movs	r0, #16
 80041b6:	f7ff fe11 	bl	8003ddc <malloc>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6270      	str	r0, [r6, #36]	; 0x24
 80041be:	b928      	cbnz	r0, 80041cc <__pow5mult+0x40>
 80041c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <__pow5mult+0xac>)
 80041c6:	481d      	ldr	r0, [pc, #116]	; (800423c <__pow5mult+0xb0>)
 80041c8:	f000 faae 	bl	8004728 <__assert_func>
 80041cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041d0:	6004      	str	r4, [r0, #0]
 80041d2:	60c4      	str	r4, [r0, #12]
 80041d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80041d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80041dc:	b94c      	cbnz	r4, 80041f2 <__pow5mult+0x66>
 80041de:	f240 2171 	movw	r1, #625	; 0x271
 80041e2:	4630      	mov	r0, r6
 80041e4:	f7ff ff14 	bl	8004010 <__i2b>
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80041f0:	6003      	str	r3, [r0, #0]
 80041f2:	f04f 0900 	mov.w	r9, #0
 80041f6:	07eb      	lsls	r3, r5, #31
 80041f8:	d50a      	bpl.n	8004210 <__pow5mult+0x84>
 80041fa:	4639      	mov	r1, r7
 80041fc:	4622      	mov	r2, r4
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff ff1c 	bl	800403c <__multiply>
 8004204:	4680      	mov	r8, r0
 8004206:	4639      	mov	r1, r7
 8004208:	4630      	mov	r0, r6
 800420a:	f7ff fe4b 	bl	8003ea4 <_Bfree>
 800420e:	4647      	mov	r7, r8
 8004210:	106d      	asrs	r5, r5, #1
 8004212:	d00b      	beq.n	800422c <__pow5mult+0xa0>
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	b938      	cbnz	r0, 8004228 <__pow5mult+0x9c>
 8004218:	4622      	mov	r2, r4
 800421a:	4621      	mov	r1, r4
 800421c:	4630      	mov	r0, r6
 800421e:	f7ff ff0d 	bl	800403c <__multiply>
 8004222:	6020      	str	r0, [r4, #0]
 8004224:	f8c0 9000 	str.w	r9, [r0]
 8004228:	4604      	mov	r4, r0
 800422a:	e7e4      	b.n	80041f6 <__pow5mult+0x6a>
 800422c:	4638      	mov	r0, r7
 800422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004232:	bf00      	nop
 8004234:	080054a0 	.word	0x080054a0
 8004238:	080052cd 	.word	0x080052cd
 800423c:	08005350 	.word	0x08005350

08004240 <__lshift>:
 8004240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	460c      	mov	r4, r1
 8004246:	4607      	mov	r7, r0
 8004248:	4691      	mov	r9, r2
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	6849      	ldr	r1, [r1, #4]
 800424e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004252:	68a3      	ldr	r3, [r4, #8]
 8004254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004258:	f108 0601 	add.w	r6, r8, #1
 800425c:	42b3      	cmp	r3, r6
 800425e:	db0b      	blt.n	8004278 <__lshift+0x38>
 8004260:	4638      	mov	r0, r7
 8004262:	f7ff fddf 	bl	8003e24 <_Balloc>
 8004266:	4605      	mov	r5, r0
 8004268:	b948      	cbnz	r0, 800427e <__lshift+0x3e>
 800426a:	4602      	mov	r2, r0
 800426c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <__lshift+0xd8>)
 8004272:	482a      	ldr	r0, [pc, #168]	; (800431c <__lshift+0xdc>)
 8004274:	f000 fa58 	bl	8004728 <__assert_func>
 8004278:	3101      	adds	r1, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	e7ee      	b.n	800425c <__lshift+0x1c>
 800427e:	2300      	movs	r3, #0
 8004280:	f100 0114 	add.w	r1, r0, #20
 8004284:	f100 0210 	add.w	r2, r0, #16
 8004288:	4618      	mov	r0, r3
 800428a:	4553      	cmp	r3, sl
 800428c:	db37      	blt.n	80042fe <__lshift+0xbe>
 800428e:	6920      	ldr	r0, [r4, #16]
 8004290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004294:	f104 0314 	add.w	r3, r4, #20
 8004298:	f019 091f 	ands.w	r9, r9, #31
 800429c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80042a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80042a4:	d02f      	beq.n	8004306 <__lshift+0xc6>
 80042a6:	468a      	mov	sl, r1
 80042a8:	f04f 0c00 	mov.w	ip, #0
 80042ac:	f1c9 0e20 	rsb	lr, r9, #32
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	fa02 f209 	lsl.w	r2, r2, r9
 80042b6:	ea42 020c 	orr.w	r2, r2, ip
 80042ba:	f84a 2b04 	str.w	r2, [sl], #4
 80042be:	f853 2b04 	ldr.w	r2, [r3], #4
 80042c2:	4298      	cmp	r0, r3
 80042c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80042c8:	d8f2      	bhi.n	80042b0 <__lshift+0x70>
 80042ca:	1b03      	subs	r3, r0, r4
 80042cc:	3b15      	subs	r3, #21
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	3304      	adds	r3, #4
 80042d4:	f104 0215 	add.w	r2, r4, #21
 80042d8:	4290      	cmp	r0, r2
 80042da:	bf38      	it	cc
 80042dc:	2304      	movcc	r3, #4
 80042de:	f841 c003 	str.w	ip, [r1, r3]
 80042e2:	f1bc 0f00 	cmp.w	ip, #0
 80042e6:	d001      	beq.n	80042ec <__lshift+0xac>
 80042e8:	f108 0602 	add.w	r6, r8, #2
 80042ec:	3e01      	subs	r6, #1
 80042ee:	4638      	mov	r0, r7
 80042f0:	4621      	mov	r1, r4
 80042f2:	612e      	str	r6, [r5, #16]
 80042f4:	f7ff fdd6 	bl	8003ea4 <_Bfree>
 80042f8:	4628      	mov	r0, r5
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8004302:	3301      	adds	r3, #1
 8004304:	e7c1      	b.n	800428a <__lshift+0x4a>
 8004306:	3904      	subs	r1, #4
 8004308:	f853 2b04 	ldr.w	r2, [r3], #4
 800430c:	4298      	cmp	r0, r3
 800430e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004312:	d8f9      	bhi.n	8004308 <__lshift+0xc8>
 8004314:	e7ea      	b.n	80042ec <__lshift+0xac>
 8004316:	bf00      	nop
 8004318:	0800533f 	.word	0x0800533f
 800431c:	08005350 	.word	0x08005350

08004320 <__mcmp>:
 8004320:	4603      	mov	r3, r0
 8004322:	690a      	ldr	r2, [r1, #16]
 8004324:	6900      	ldr	r0, [r0, #16]
 8004326:	b530      	push	{r4, r5, lr}
 8004328:	1a80      	subs	r0, r0, r2
 800432a:	d10d      	bne.n	8004348 <__mcmp+0x28>
 800432c:	3314      	adds	r3, #20
 800432e:	3114      	adds	r1, #20
 8004330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800433c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004340:	4295      	cmp	r5, r2
 8004342:	d002      	beq.n	800434a <__mcmp+0x2a>
 8004344:	d304      	bcc.n	8004350 <__mcmp+0x30>
 8004346:	2001      	movs	r0, #1
 8004348:	bd30      	pop	{r4, r5, pc}
 800434a:	42a3      	cmp	r3, r4
 800434c:	d3f4      	bcc.n	8004338 <__mcmp+0x18>
 800434e:	e7fb      	b.n	8004348 <__mcmp+0x28>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	e7f8      	b.n	8004348 <__mcmp+0x28>
	...

08004358 <__mdiff>:
 8004358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	460d      	mov	r5, r1
 800435e:	4607      	mov	r7, r0
 8004360:	4611      	mov	r1, r2
 8004362:	4628      	mov	r0, r5
 8004364:	4614      	mov	r4, r2
 8004366:	f7ff ffdb 	bl	8004320 <__mcmp>
 800436a:	1e06      	subs	r6, r0, #0
 800436c:	d111      	bne.n	8004392 <__mdiff+0x3a>
 800436e:	4631      	mov	r1, r6
 8004370:	4638      	mov	r0, r7
 8004372:	f7ff fd57 	bl	8003e24 <_Balloc>
 8004376:	4602      	mov	r2, r0
 8004378:	b928      	cbnz	r0, 8004386 <__mdiff+0x2e>
 800437a:	f240 2132 	movw	r1, #562	; 0x232
 800437e:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <__mdiff+0x110>)
 8004380:	483a      	ldr	r0, [pc, #232]	; (800446c <__mdiff+0x114>)
 8004382:	f000 f9d1 	bl	8004728 <__assert_func>
 8004386:	2301      	movs	r3, #1
 8004388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800438c:	4610      	mov	r0, r2
 800438e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	bfa4      	itt	ge
 8004394:	4623      	movge	r3, r4
 8004396:	462c      	movge	r4, r5
 8004398:	4638      	mov	r0, r7
 800439a:	6861      	ldr	r1, [r4, #4]
 800439c:	bfa6      	itte	ge
 800439e:	461d      	movge	r5, r3
 80043a0:	2600      	movge	r6, #0
 80043a2:	2601      	movlt	r6, #1
 80043a4:	f7ff fd3e 	bl	8003e24 <_Balloc>
 80043a8:	4602      	mov	r2, r0
 80043aa:	b918      	cbnz	r0, 80043b4 <__mdiff+0x5c>
 80043ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <__mdiff+0x110>)
 80043b2:	e7e5      	b.n	8004380 <__mdiff+0x28>
 80043b4:	f102 0814 	add.w	r8, r2, #20
 80043b8:	46c2      	mov	sl, r8
 80043ba:	f04f 0c00 	mov.w	ip, #0
 80043be:	6927      	ldr	r7, [r4, #16]
 80043c0:	60c6      	str	r6, [r0, #12]
 80043c2:	692e      	ldr	r6, [r5, #16]
 80043c4:	f104 0014 	add.w	r0, r4, #20
 80043c8:	f105 0914 	add.w	r9, r5, #20
 80043cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80043d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80043d4:	3410      	adds	r4, #16
 80043d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80043da:	f859 3b04 	ldr.w	r3, [r9], #4
 80043de:	fa1f f18b 	uxth.w	r1, fp
 80043e2:	448c      	add	ip, r1
 80043e4:	b299      	uxth	r1, r3
 80043e6:	0c1b      	lsrs	r3, r3, #16
 80043e8:	ebac 0101 	sub.w	r1, ip, r1
 80043ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80043f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80043f4:	b289      	uxth	r1, r1
 80043f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80043fa:	454e      	cmp	r6, r9
 80043fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004400:	f84a 3b04 	str.w	r3, [sl], #4
 8004404:	d8e7      	bhi.n	80043d6 <__mdiff+0x7e>
 8004406:	1b73      	subs	r3, r6, r5
 8004408:	3b15      	subs	r3, #21
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	3515      	adds	r5, #21
 8004410:	3304      	adds	r3, #4
 8004412:	42ae      	cmp	r6, r5
 8004414:	bf38      	it	cc
 8004416:	2304      	movcc	r3, #4
 8004418:	4418      	add	r0, r3
 800441a:	4443      	add	r3, r8
 800441c:	461e      	mov	r6, r3
 800441e:	4605      	mov	r5, r0
 8004420:	4575      	cmp	r5, lr
 8004422:	d30e      	bcc.n	8004442 <__mdiff+0xea>
 8004424:	f10e 0103 	add.w	r1, lr, #3
 8004428:	1a09      	subs	r1, r1, r0
 800442a:	f021 0103 	bic.w	r1, r1, #3
 800442e:	3803      	subs	r0, #3
 8004430:	4586      	cmp	lr, r0
 8004432:	bf38      	it	cc
 8004434:	2100      	movcc	r1, #0
 8004436:	4419      	add	r1, r3
 8004438:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800443c:	b18b      	cbz	r3, 8004462 <__mdiff+0x10a>
 800443e:	6117      	str	r7, [r2, #16]
 8004440:	e7a4      	b.n	800438c <__mdiff+0x34>
 8004442:	f855 8b04 	ldr.w	r8, [r5], #4
 8004446:	fa1f f188 	uxth.w	r1, r8
 800444a:	4461      	add	r1, ip
 800444c:	140c      	asrs	r4, r1, #16
 800444e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004452:	b289      	uxth	r1, r1
 8004454:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004458:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800445c:	f846 1b04 	str.w	r1, [r6], #4
 8004460:	e7de      	b.n	8004420 <__mdiff+0xc8>
 8004462:	3f01      	subs	r7, #1
 8004464:	e7e8      	b.n	8004438 <__mdiff+0xe0>
 8004466:	bf00      	nop
 8004468:	0800533f 	.word	0x0800533f
 800446c:	08005350 	.word	0x08005350

08004470 <__d2b>:
 8004470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004474:	2101      	movs	r1, #1
 8004476:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800447a:	4690      	mov	r8, r2
 800447c:	461d      	mov	r5, r3
 800447e:	f7ff fcd1 	bl	8003e24 <_Balloc>
 8004482:	4604      	mov	r4, r0
 8004484:	b930      	cbnz	r0, 8004494 <__d2b+0x24>
 8004486:	4602      	mov	r2, r0
 8004488:	f240 310a 	movw	r1, #778	; 0x30a
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <__d2b+0xb0>)
 800448e:	4825      	ldr	r0, [pc, #148]	; (8004524 <__d2b+0xb4>)
 8004490:	f000 f94a 	bl	8004728 <__assert_func>
 8004494:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004498:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800449c:	bb2d      	cbnz	r5, 80044ea <__d2b+0x7a>
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f1b8 0300 	subs.w	r3, r8, #0
 80044a4:	d026      	beq.n	80044f4 <__d2b+0x84>
 80044a6:	4668      	mov	r0, sp
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	f7ff fd83 	bl	8003fb4 <__lo0bits>
 80044ae:	9900      	ldr	r1, [sp, #0]
 80044b0:	b1f0      	cbz	r0, 80044f0 <__d2b+0x80>
 80044b2:	9a01      	ldr	r2, [sp, #4]
 80044b4:	f1c0 0320 	rsb	r3, r0, #32
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	430b      	orrs	r3, r1
 80044be:	40c2      	lsrs	r2, r0
 80044c0:	6163      	str	r3, [r4, #20]
 80044c2:	9201      	str	r2, [sp, #4]
 80044c4:	9b01      	ldr	r3, [sp, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2102      	movne	r1, #2
 80044cc:	2101      	moveq	r1, #1
 80044ce:	61a3      	str	r3, [r4, #24]
 80044d0:	6121      	str	r1, [r4, #16]
 80044d2:	b1c5      	cbz	r5, 8004506 <__d2b+0x96>
 80044d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80044d8:	4405      	add	r5, r0
 80044da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80044de:	603d      	str	r5, [r7, #0]
 80044e0:	6030      	str	r0, [r6, #0]
 80044e2:	4620      	mov	r0, r4
 80044e4:	b002      	add	sp, #8
 80044e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ee:	e7d6      	b.n	800449e <__d2b+0x2e>
 80044f0:	6161      	str	r1, [r4, #20]
 80044f2:	e7e7      	b.n	80044c4 <__d2b+0x54>
 80044f4:	a801      	add	r0, sp, #4
 80044f6:	f7ff fd5d 	bl	8003fb4 <__lo0bits>
 80044fa:	2101      	movs	r1, #1
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	6121      	str	r1, [r4, #16]
 8004500:	6163      	str	r3, [r4, #20]
 8004502:	3020      	adds	r0, #32
 8004504:	e7e5      	b.n	80044d2 <__d2b+0x62>
 8004506:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800450a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800450e:	6038      	str	r0, [r7, #0]
 8004510:	6918      	ldr	r0, [r3, #16]
 8004512:	f7ff fd2f 	bl	8003f74 <__hi0bits>
 8004516:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800451a:	6031      	str	r1, [r6, #0]
 800451c:	e7e1      	b.n	80044e2 <__d2b+0x72>
 800451e:	bf00      	nop
 8004520:	0800533f 	.word	0x0800533f
 8004524:	08005350 	.word	0x08005350

08004528 <_calloc_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	fba1 5402 	umull	r5, r4, r1, r2
 800452e:	b934      	cbnz	r4, 800453e <_calloc_r+0x16>
 8004530:	4629      	mov	r1, r5
 8004532:	f000 f875 	bl	8004620 <_malloc_r>
 8004536:	4606      	mov	r6, r0
 8004538:	b928      	cbnz	r0, 8004546 <_calloc_r+0x1e>
 800453a:	4630      	mov	r0, r6
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	220c      	movs	r2, #12
 8004540:	2600      	movs	r6, #0
 8004542:	6002      	str	r2, [r0, #0]
 8004544:	e7f9      	b.n	800453a <_calloc_r+0x12>
 8004546:	462a      	mov	r2, r5
 8004548:	4621      	mov	r1, r4
 800454a:	f7fe f961 	bl	8002810 <memset>
 800454e:	e7f4      	b.n	800453a <_calloc_r+0x12>

08004550 <_free_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4605      	mov	r5, r0
 8004554:	2900      	cmp	r1, #0
 8004556:	d040      	beq.n	80045da <_free_r+0x8a>
 8004558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455c:	1f0c      	subs	r4, r1, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfb8      	it	lt
 8004562:	18e4      	addlt	r4, r4, r3
 8004564:	f000 f922 	bl	80047ac <__malloc_lock>
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <_free_r+0x8c>)
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	b933      	cbnz	r3, 800457c <_free_r+0x2c>
 800456e:	6063      	str	r3, [r4, #4]
 8004570:	6014      	str	r4, [r2, #0]
 8004572:	4628      	mov	r0, r5
 8004574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004578:	f000 b91e 	b.w	80047b8 <__malloc_unlock>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d908      	bls.n	8004592 <_free_r+0x42>
 8004580:	6820      	ldr	r0, [r4, #0]
 8004582:	1821      	adds	r1, r4, r0
 8004584:	428b      	cmp	r3, r1
 8004586:	bf01      	itttt	eq
 8004588:	6819      	ldreq	r1, [r3, #0]
 800458a:	685b      	ldreq	r3, [r3, #4]
 800458c:	1809      	addeq	r1, r1, r0
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	e7ed      	b.n	800456e <_free_r+0x1e>
 8004592:	461a      	mov	r2, r3
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b10b      	cbz	r3, 800459c <_free_r+0x4c>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d9fa      	bls.n	8004592 <_free_r+0x42>
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	1850      	adds	r0, r2, r1
 80045a0:	42a0      	cmp	r0, r4
 80045a2:	d10b      	bne.n	80045bc <_free_r+0x6c>
 80045a4:	6820      	ldr	r0, [r4, #0]
 80045a6:	4401      	add	r1, r0
 80045a8:	1850      	adds	r0, r2, r1
 80045aa:	4283      	cmp	r3, r0
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	d1e0      	bne.n	8004572 <_free_r+0x22>
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4401      	add	r1, r0
 80045b6:	6011      	str	r1, [r2, #0]
 80045b8:	6053      	str	r3, [r2, #4]
 80045ba:	e7da      	b.n	8004572 <_free_r+0x22>
 80045bc:	d902      	bls.n	80045c4 <_free_r+0x74>
 80045be:	230c      	movs	r3, #12
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	e7d6      	b.n	8004572 <_free_r+0x22>
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	1821      	adds	r1, r4, r0
 80045c8:	428b      	cmp	r3, r1
 80045ca:	bf01      	itttt	eq
 80045cc:	6819      	ldreq	r1, [r3, #0]
 80045ce:	685b      	ldreq	r3, [r3, #4]
 80045d0:	1809      	addeq	r1, r1, r0
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6054      	str	r4, [r2, #4]
 80045d8:	e7cb      	b.n	8004572 <_free_r+0x22>
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	20000260 	.word	0x20000260

080045e0 <sbrk_aligned>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4e0e      	ldr	r6, [pc, #56]	; (800461c <sbrk_aligned+0x3c>)
 80045e4:	460c      	mov	r4, r1
 80045e6:	6831      	ldr	r1, [r6, #0]
 80045e8:	4605      	mov	r5, r0
 80045ea:	b911      	cbnz	r1, 80045f2 <sbrk_aligned+0x12>
 80045ec:	f000 f88c 	bl	8004708 <_sbrk_r>
 80045f0:	6030      	str	r0, [r6, #0]
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f887 	bl	8004708 <_sbrk_r>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d00a      	beq.n	8004614 <sbrk_aligned+0x34>
 80045fe:	1cc4      	adds	r4, r0, #3
 8004600:	f024 0403 	bic.w	r4, r4, #3
 8004604:	42a0      	cmp	r0, r4
 8004606:	d007      	beq.n	8004618 <sbrk_aligned+0x38>
 8004608:	1a21      	subs	r1, r4, r0
 800460a:	4628      	mov	r0, r5
 800460c:	f000 f87c 	bl	8004708 <_sbrk_r>
 8004610:	3001      	adds	r0, #1
 8004612:	d101      	bne.n	8004618 <sbrk_aligned+0x38>
 8004614:	f04f 34ff 	mov.w	r4, #4294967295
 8004618:	4620      	mov	r0, r4
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	20000264 	.word	0x20000264

08004620 <_malloc_r>:
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	1ccd      	adds	r5, r1, #3
 8004626:	f025 0503 	bic.w	r5, r5, #3
 800462a:	3508      	adds	r5, #8
 800462c:	2d0c      	cmp	r5, #12
 800462e:	bf38      	it	cc
 8004630:	250c      	movcc	r5, #12
 8004632:	2d00      	cmp	r5, #0
 8004634:	4607      	mov	r7, r0
 8004636:	db01      	blt.n	800463c <_malloc_r+0x1c>
 8004638:	42a9      	cmp	r1, r5
 800463a:	d905      	bls.n	8004648 <_malloc_r+0x28>
 800463c:	230c      	movs	r3, #12
 800463e:	2600      	movs	r6, #0
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4630      	mov	r0, r6
 8004644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004648:	4e2e      	ldr	r6, [pc, #184]	; (8004704 <_malloc_r+0xe4>)
 800464a:	f000 f8af 	bl	80047ac <__malloc_lock>
 800464e:	6833      	ldr	r3, [r6, #0]
 8004650:	461c      	mov	r4, r3
 8004652:	bb34      	cbnz	r4, 80046a2 <_malloc_r+0x82>
 8004654:	4629      	mov	r1, r5
 8004656:	4638      	mov	r0, r7
 8004658:	f7ff ffc2 	bl	80045e0 <sbrk_aligned>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	4604      	mov	r4, r0
 8004660:	d14d      	bne.n	80046fe <_malloc_r+0xde>
 8004662:	6834      	ldr	r4, [r6, #0]
 8004664:	4626      	mov	r6, r4
 8004666:	2e00      	cmp	r6, #0
 8004668:	d140      	bne.n	80046ec <_malloc_r+0xcc>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	4631      	mov	r1, r6
 800466e:	4638      	mov	r0, r7
 8004670:	eb04 0803 	add.w	r8, r4, r3
 8004674:	f000 f848 	bl	8004708 <_sbrk_r>
 8004678:	4580      	cmp	r8, r0
 800467a:	d13a      	bne.n	80046f2 <_malloc_r+0xd2>
 800467c:	6821      	ldr	r1, [r4, #0]
 800467e:	3503      	adds	r5, #3
 8004680:	1a6d      	subs	r5, r5, r1
 8004682:	f025 0503 	bic.w	r5, r5, #3
 8004686:	3508      	adds	r5, #8
 8004688:	2d0c      	cmp	r5, #12
 800468a:	bf38      	it	cc
 800468c:	250c      	movcc	r5, #12
 800468e:	4638      	mov	r0, r7
 8004690:	4629      	mov	r1, r5
 8004692:	f7ff ffa5 	bl	80045e0 <sbrk_aligned>
 8004696:	3001      	adds	r0, #1
 8004698:	d02b      	beq.n	80046f2 <_malloc_r+0xd2>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	442b      	add	r3, r5
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	e00e      	b.n	80046c0 <_malloc_r+0xa0>
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	1b52      	subs	r2, r2, r5
 80046a6:	d41e      	bmi.n	80046e6 <_malloc_r+0xc6>
 80046a8:	2a0b      	cmp	r2, #11
 80046aa:	d916      	bls.n	80046da <_malloc_r+0xba>
 80046ac:	1961      	adds	r1, r4, r5
 80046ae:	42a3      	cmp	r3, r4
 80046b0:	6025      	str	r5, [r4, #0]
 80046b2:	bf18      	it	ne
 80046b4:	6059      	strne	r1, [r3, #4]
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	bf08      	it	eq
 80046ba:	6031      	streq	r1, [r6, #0]
 80046bc:	5162      	str	r2, [r4, r5]
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	4638      	mov	r0, r7
 80046c2:	f104 060b 	add.w	r6, r4, #11
 80046c6:	f000 f877 	bl	80047b8 <__malloc_unlock>
 80046ca:	f026 0607 	bic.w	r6, r6, #7
 80046ce:	1d23      	adds	r3, r4, #4
 80046d0:	1af2      	subs	r2, r6, r3
 80046d2:	d0b6      	beq.n	8004642 <_malloc_r+0x22>
 80046d4:	1b9b      	subs	r3, r3, r6
 80046d6:	50a3      	str	r3, [r4, r2]
 80046d8:	e7b3      	b.n	8004642 <_malloc_r+0x22>
 80046da:	6862      	ldr	r2, [r4, #4]
 80046dc:	42a3      	cmp	r3, r4
 80046de:	bf0c      	ite	eq
 80046e0:	6032      	streq	r2, [r6, #0]
 80046e2:	605a      	strne	r2, [r3, #4]
 80046e4:	e7ec      	b.n	80046c0 <_malloc_r+0xa0>
 80046e6:	4623      	mov	r3, r4
 80046e8:	6864      	ldr	r4, [r4, #4]
 80046ea:	e7b2      	b.n	8004652 <_malloc_r+0x32>
 80046ec:	4634      	mov	r4, r6
 80046ee:	6876      	ldr	r6, [r6, #4]
 80046f0:	e7b9      	b.n	8004666 <_malloc_r+0x46>
 80046f2:	230c      	movs	r3, #12
 80046f4:	4638      	mov	r0, r7
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	f000 f85e 	bl	80047b8 <__malloc_unlock>
 80046fc:	e7a1      	b.n	8004642 <_malloc_r+0x22>
 80046fe:	6025      	str	r5, [r4, #0]
 8004700:	e7de      	b.n	80046c0 <_malloc_r+0xa0>
 8004702:	bf00      	nop
 8004704:	20000260 	.word	0x20000260

08004708 <_sbrk_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	2300      	movs	r3, #0
 800470c:	4d05      	ldr	r5, [pc, #20]	; (8004724 <_sbrk_r+0x1c>)
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	f7fc fc92 	bl	800103c <_sbrk>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_sbrk_r+0x1a>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_sbrk_r+0x1a>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	20000268 	.word	0x20000268

08004728 <__assert_func>:
 8004728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800472a:	4614      	mov	r4, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <__assert_func+0x2c>)
 8004730:	4605      	mov	r5, r0
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68d8      	ldr	r0, [r3, #12]
 8004736:	b14c      	cbz	r4, 800474c <__assert_func+0x24>
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <__assert_func+0x30>)
 800473a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800473e:	9100      	str	r1, [sp, #0]
 8004740:	462b      	mov	r3, r5
 8004742:	4906      	ldr	r1, [pc, #24]	; (800475c <__assert_func+0x34>)
 8004744:	f000 f80e 	bl	8004764 <fiprintf>
 8004748:	f000 fa62 	bl	8004c10 <abort>
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <__assert_func+0x38>)
 800474e:	461c      	mov	r4, r3
 8004750:	e7f3      	b.n	800473a <__assert_func+0x12>
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	080054ac 	.word	0x080054ac
 800475c:	080054b9 	.word	0x080054b9
 8004760:	080054e7 	.word	0x080054e7

08004764 <fiprintf>:
 8004764:	b40e      	push	{r1, r2, r3}
 8004766:	b503      	push	{r0, r1, lr}
 8004768:	4601      	mov	r1, r0
 800476a:	ab03      	add	r3, sp, #12
 800476c:	4805      	ldr	r0, [pc, #20]	; (8004784 <fiprintf+0x20>)
 800476e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	f000 f84d 	bl	8004814 <_vfiprintf_r>
 800477a:	b002      	add	sp, #8
 800477c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004780:	b003      	add	sp, #12
 8004782:	4770      	bx	lr
 8004784:	2000000c 	.word	0x2000000c

08004788 <__ascii_mbtowc>:
 8004788:	b082      	sub	sp, #8
 800478a:	b901      	cbnz	r1, 800478e <__ascii_mbtowc+0x6>
 800478c:	a901      	add	r1, sp, #4
 800478e:	b142      	cbz	r2, 80047a2 <__ascii_mbtowc+0x1a>
 8004790:	b14b      	cbz	r3, 80047a6 <__ascii_mbtowc+0x1e>
 8004792:	7813      	ldrb	r3, [r2, #0]
 8004794:	600b      	str	r3, [r1, #0]
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	1e10      	subs	r0, r2, #0
 800479a:	bf18      	it	ne
 800479c:	2001      	movne	r0, #1
 800479e:	b002      	add	sp, #8
 80047a0:	4770      	bx	lr
 80047a2:	4610      	mov	r0, r2
 80047a4:	e7fb      	b.n	800479e <__ascii_mbtowc+0x16>
 80047a6:	f06f 0001 	mvn.w	r0, #1
 80047aa:	e7f8      	b.n	800479e <__ascii_mbtowc+0x16>

080047ac <__malloc_lock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__malloc_lock+0x8>)
 80047ae:	f000 bbeb 	b.w	8004f88 <__retarget_lock_acquire_recursive>
 80047b2:	bf00      	nop
 80047b4:	2000026c 	.word	0x2000026c

080047b8 <__malloc_unlock>:
 80047b8:	4801      	ldr	r0, [pc, #4]	; (80047c0 <__malloc_unlock+0x8>)
 80047ba:	f000 bbe6 	b.w	8004f8a <__retarget_lock_release_recursive>
 80047be:	bf00      	nop
 80047c0:	2000026c 	.word	0x2000026c

080047c4 <__sfputc_r>:
 80047c4:	6893      	ldr	r3, [r2, #8]
 80047c6:	b410      	push	{r4}
 80047c8:	3b01      	subs	r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	6093      	str	r3, [r2, #8]
 80047ce:	da07      	bge.n	80047e0 <__sfputc_r+0x1c>
 80047d0:	6994      	ldr	r4, [r2, #24]
 80047d2:	42a3      	cmp	r3, r4
 80047d4:	db01      	blt.n	80047da <__sfputc_r+0x16>
 80047d6:	290a      	cmp	r1, #10
 80047d8:	d102      	bne.n	80047e0 <__sfputc_r+0x1c>
 80047da:	bc10      	pop	{r4}
 80047dc:	f000 b94a 	b.w	8004a74 <__swbuf_r>
 80047e0:	6813      	ldr	r3, [r2, #0]
 80047e2:	1c58      	adds	r0, r3, #1
 80047e4:	6010      	str	r0, [r2, #0]
 80047e6:	7019      	strb	r1, [r3, #0]
 80047e8:	4608      	mov	r0, r1
 80047ea:	bc10      	pop	{r4}
 80047ec:	4770      	bx	lr

080047ee <__sfputs_r>:
 80047ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	18d5      	adds	r5, r2, r3
 80047f8:	42ac      	cmp	r4, r5
 80047fa:	d101      	bne.n	8004800 <__sfputs_r+0x12>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e007      	b.n	8004810 <__sfputs_r+0x22>
 8004800:	463a      	mov	r2, r7
 8004802:	4630      	mov	r0, r6
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	f7ff ffdc 	bl	80047c4 <__sfputc_r>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d1f3      	bne.n	80047f8 <__sfputs_r+0xa>
 8004810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004814 <_vfiprintf_r>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	460d      	mov	r5, r1
 800481a:	4614      	mov	r4, r2
 800481c:	4698      	mov	r8, r3
 800481e:	4606      	mov	r6, r0
 8004820:	b09d      	sub	sp, #116	; 0x74
 8004822:	b118      	cbz	r0, 800482c <_vfiprintf_r+0x18>
 8004824:	6983      	ldr	r3, [r0, #24]
 8004826:	b90b      	cbnz	r3, 800482c <_vfiprintf_r+0x18>
 8004828:	f000 fb10 	bl	8004e4c <__sinit>
 800482c:	4b89      	ldr	r3, [pc, #548]	; (8004a54 <_vfiprintf_r+0x240>)
 800482e:	429d      	cmp	r5, r3
 8004830:	d11b      	bne.n	800486a <_vfiprintf_r+0x56>
 8004832:	6875      	ldr	r5, [r6, #4]
 8004834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004836:	07d9      	lsls	r1, r3, #31
 8004838:	d405      	bmi.n	8004846 <_vfiprintf_r+0x32>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d402      	bmi.n	8004846 <_vfiprintf_r+0x32>
 8004840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004842:	f000 fba1 	bl	8004f88 <__retarget_lock_acquire_recursive>
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	071b      	lsls	r3, r3, #28
 800484a:	d501      	bpl.n	8004850 <_vfiprintf_r+0x3c>
 800484c:	692b      	ldr	r3, [r5, #16]
 800484e:	b9eb      	cbnz	r3, 800488c <_vfiprintf_r+0x78>
 8004850:	4629      	mov	r1, r5
 8004852:	4630      	mov	r0, r6
 8004854:	f000 f96e 	bl	8004b34 <__swsetup_r>
 8004858:	b1c0      	cbz	r0, 800488c <_vfiprintf_r+0x78>
 800485a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800485c:	07dc      	lsls	r4, r3, #31
 800485e:	d50e      	bpl.n	800487e <_vfiprintf_r+0x6a>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b01d      	add	sp, #116	; 0x74
 8004866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486a:	4b7b      	ldr	r3, [pc, #492]	; (8004a58 <_vfiprintf_r+0x244>)
 800486c:	429d      	cmp	r5, r3
 800486e:	d101      	bne.n	8004874 <_vfiprintf_r+0x60>
 8004870:	68b5      	ldr	r5, [r6, #8]
 8004872:	e7df      	b.n	8004834 <_vfiprintf_r+0x20>
 8004874:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <_vfiprintf_r+0x248>)
 8004876:	429d      	cmp	r5, r3
 8004878:	bf08      	it	eq
 800487a:	68f5      	ldreq	r5, [r6, #12]
 800487c:	e7da      	b.n	8004834 <_vfiprintf_r+0x20>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	0598      	lsls	r0, r3, #22
 8004882:	d4ed      	bmi.n	8004860 <_vfiprintf_r+0x4c>
 8004884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004886:	f000 fb80 	bl	8004f8a <__retarget_lock_release_recursive>
 800488a:	e7e9      	b.n	8004860 <_vfiprintf_r+0x4c>
 800488c:	2300      	movs	r3, #0
 800488e:	9309      	str	r3, [sp, #36]	; 0x24
 8004890:	2320      	movs	r3, #32
 8004892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004896:	2330      	movs	r3, #48	; 0x30
 8004898:	f04f 0901 	mov.w	r9, #1
 800489c:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004a60 <_vfiprintf_r+0x24c>
 80048a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a8:	4623      	mov	r3, r4
 80048aa:	469a      	mov	sl, r3
 80048ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b0:	b10a      	cbz	r2, 80048b6 <_vfiprintf_r+0xa2>
 80048b2:	2a25      	cmp	r2, #37	; 0x25
 80048b4:	d1f9      	bne.n	80048aa <_vfiprintf_r+0x96>
 80048b6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ba:	d00b      	beq.n	80048d4 <_vfiprintf_r+0xc0>
 80048bc:	465b      	mov	r3, fp
 80048be:	4622      	mov	r2, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ff93 	bl	80047ee <__sfputs_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	f000 80aa 	beq.w	8004a22 <_vfiprintf_r+0x20e>
 80048ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d0:	445a      	add	r2, fp
 80048d2:	9209      	str	r2, [sp, #36]	; 0x24
 80048d4:	f89a 3000 	ldrb.w	r3, [sl]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80a2 	beq.w	8004a22 <_vfiprintf_r+0x20e>
 80048de:	2300      	movs	r3, #0
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e8:	f10a 0a01 	add.w	sl, sl, #1
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9307      	str	r3, [sp, #28]
 80048f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f4:	931a      	str	r3, [sp, #104]	; 0x68
 80048f6:	4654      	mov	r4, sl
 80048f8:	2205      	movs	r2, #5
 80048fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fe:	4858      	ldr	r0, [pc, #352]	; (8004a60 <_vfiprintf_r+0x24c>)
 8004900:	f7ff fa74 	bl	8003dec <memchr>
 8004904:	9a04      	ldr	r2, [sp, #16]
 8004906:	b9d8      	cbnz	r0, 8004940 <_vfiprintf_r+0x12c>
 8004908:	06d1      	lsls	r1, r2, #27
 800490a:	bf44      	itt	mi
 800490c:	2320      	movmi	r3, #32
 800490e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004912:	0713      	lsls	r3, r2, #28
 8004914:	bf44      	itt	mi
 8004916:	232b      	movmi	r3, #43	; 0x2b
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491c:	f89a 3000 	ldrb.w	r3, [sl]
 8004920:	2b2a      	cmp	r3, #42	; 0x2a
 8004922:	d015      	beq.n	8004950 <_vfiprintf_r+0x13c>
 8004924:	4654      	mov	r4, sl
 8004926:	2000      	movs	r0, #0
 8004928:	f04f 0c0a 	mov.w	ip, #10
 800492c:	9a07      	ldr	r2, [sp, #28]
 800492e:	4621      	mov	r1, r4
 8004930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004934:	3b30      	subs	r3, #48	; 0x30
 8004936:	2b09      	cmp	r3, #9
 8004938:	d94e      	bls.n	80049d8 <_vfiprintf_r+0x1c4>
 800493a:	b1b0      	cbz	r0, 800496a <_vfiprintf_r+0x156>
 800493c:	9207      	str	r2, [sp, #28]
 800493e:	e014      	b.n	800496a <_vfiprintf_r+0x156>
 8004940:	eba0 0308 	sub.w	r3, r0, r8
 8004944:	fa09 f303 	lsl.w	r3, r9, r3
 8004948:	4313      	orrs	r3, r2
 800494a:	46a2      	mov	sl, r4
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	e7d2      	b.n	80048f6 <_vfiprintf_r+0xe2>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	1d19      	adds	r1, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	9103      	str	r1, [sp, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	bfbb      	ittet	lt
 800495c:	425b      	neglt	r3, r3
 800495e:	f042 0202 	orrlt.w	r2, r2, #2
 8004962:	9307      	strge	r3, [sp, #28]
 8004964:	9307      	strlt	r3, [sp, #28]
 8004966:	bfb8      	it	lt
 8004968:	9204      	strlt	r2, [sp, #16]
 800496a:	7823      	ldrb	r3, [r4, #0]
 800496c:	2b2e      	cmp	r3, #46	; 0x2e
 800496e:	d10c      	bne.n	800498a <_vfiprintf_r+0x176>
 8004970:	7863      	ldrb	r3, [r4, #1]
 8004972:	2b2a      	cmp	r3, #42	; 0x2a
 8004974:	d135      	bne.n	80049e2 <_vfiprintf_r+0x1ce>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	3402      	adds	r4, #2
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	9203      	str	r2, [sp, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	bfb8      	it	lt
 8004984:	f04f 33ff 	movlt.w	r3, #4294967295
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004a64 <_vfiprintf_r+0x250>
 800498e:	2203      	movs	r2, #3
 8004990:	4650      	mov	r0, sl
 8004992:	7821      	ldrb	r1, [r4, #0]
 8004994:	f7ff fa2a 	bl	8003dec <memchr>
 8004998:	b140      	cbz	r0, 80049ac <_vfiprintf_r+0x198>
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	eba0 000a 	sub.w	r0, r0, sl
 80049a0:	fa03 f000 	lsl.w	r0, r3, r0
 80049a4:	9b04      	ldr	r3, [sp, #16]
 80049a6:	3401      	adds	r4, #1
 80049a8:	4303      	orrs	r3, r0
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b0:	2206      	movs	r2, #6
 80049b2:	482d      	ldr	r0, [pc, #180]	; (8004a68 <_vfiprintf_r+0x254>)
 80049b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b8:	f7ff fa18 	bl	8003dec <memchr>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d03f      	beq.n	8004a40 <_vfiprintf_r+0x22c>
 80049c0:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <_vfiprintf_r+0x258>)
 80049c2:	bb1b      	cbnz	r3, 8004a0c <_vfiprintf_r+0x1f8>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3307      	adds	r3, #7
 80049c8:	f023 0307 	bic.w	r3, r3, #7
 80049cc:	3308      	adds	r3, #8
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d2:	443b      	add	r3, r7
 80049d4:	9309      	str	r3, [sp, #36]	; 0x24
 80049d6:	e767      	b.n	80048a8 <_vfiprintf_r+0x94>
 80049d8:	460c      	mov	r4, r1
 80049da:	2001      	movs	r0, #1
 80049dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e0:	e7a5      	b.n	800492e <_vfiprintf_r+0x11a>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f04f 0c0a 	mov.w	ip, #10
 80049e8:	4619      	mov	r1, r3
 80049ea:	3401      	adds	r4, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f4:	3a30      	subs	r2, #48	; 0x30
 80049f6:	2a09      	cmp	r2, #9
 80049f8:	d903      	bls.n	8004a02 <_vfiprintf_r+0x1ee>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0c5      	beq.n	800498a <_vfiprintf_r+0x176>
 80049fe:	9105      	str	r1, [sp, #20]
 8004a00:	e7c3      	b.n	800498a <_vfiprintf_r+0x176>
 8004a02:	4604      	mov	r4, r0
 8004a04:	2301      	movs	r3, #1
 8004a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a0a:	e7f0      	b.n	80049ee <_vfiprintf_r+0x1da>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	462a      	mov	r2, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <_vfiprintf_r+0x25c>)
 8004a16:	a904      	add	r1, sp, #16
 8004a18:	f7fd ffa0 	bl	800295c <_printf_float>
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	1c78      	adds	r0, r7, #1
 8004a20:	d1d6      	bne.n	80049d0 <_vfiprintf_r+0x1bc>
 8004a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a24:	07d9      	lsls	r1, r3, #31
 8004a26:	d405      	bmi.n	8004a34 <_vfiprintf_r+0x220>
 8004a28:	89ab      	ldrh	r3, [r5, #12]
 8004a2a:	059a      	lsls	r2, r3, #22
 8004a2c:	d402      	bmi.n	8004a34 <_vfiprintf_r+0x220>
 8004a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a30:	f000 faab 	bl	8004f8a <__retarget_lock_release_recursive>
 8004a34:	89ab      	ldrh	r3, [r5, #12]
 8004a36:	065b      	lsls	r3, r3, #25
 8004a38:	f53f af12 	bmi.w	8004860 <_vfiprintf_r+0x4c>
 8004a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3e:	e711      	b.n	8004864 <_vfiprintf_r+0x50>
 8004a40:	ab03      	add	r3, sp, #12
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4630      	mov	r0, r6
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <_vfiprintf_r+0x25c>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	f7fe fa22 	bl	8002e94 <_printf_i>
 8004a50:	e7e4      	b.n	8004a1c <_vfiprintf_r+0x208>
 8004a52:	bf00      	nop
 8004a54:	08005624 	.word	0x08005624
 8004a58:	08005644 	.word	0x08005644
 8004a5c:	08005604 	.word	0x08005604
 8004a60:	080054f2 	.word	0x080054f2
 8004a64:	080054f8 	.word	0x080054f8
 8004a68:	080054fc 	.word	0x080054fc
 8004a6c:	0800295d 	.word	0x0800295d
 8004a70:	080047ef 	.word	0x080047ef

08004a74 <__swbuf_r>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	460e      	mov	r6, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	b118      	cbz	r0, 8004a86 <__swbuf_r+0x12>
 8004a7e:	6983      	ldr	r3, [r0, #24]
 8004a80:	b90b      	cbnz	r3, 8004a86 <__swbuf_r+0x12>
 8004a82:	f000 f9e3 	bl	8004e4c <__sinit>
 8004a86:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <__swbuf_r+0x98>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d12b      	bne.n	8004ae4 <__swbuf_r+0x70>
 8004a8c:	686c      	ldr	r4, [r5, #4]
 8004a8e:	69a3      	ldr	r3, [r4, #24]
 8004a90:	60a3      	str	r3, [r4, #8]
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	071a      	lsls	r2, r3, #28
 8004a96:	d52f      	bpl.n	8004af8 <__swbuf_r+0x84>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	b36b      	cbz	r3, 8004af8 <__swbuf_r+0x84>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	6820      	ldr	r0, [r4, #0]
 8004aa0:	b2f6      	uxtb	r6, r6
 8004aa2:	1ac0      	subs	r0, r0, r3
 8004aa4:	6963      	ldr	r3, [r4, #20]
 8004aa6:	4637      	mov	r7, r6
 8004aa8:	4283      	cmp	r3, r0
 8004aaa:	dc04      	bgt.n	8004ab6 <__swbuf_r+0x42>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f938 	bl	8004d24 <_fflush_r>
 8004ab4:	bb30      	cbnz	r0, 8004b04 <__swbuf_r+0x90>
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	3001      	adds	r0, #1
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60a3      	str	r3, [r4, #8]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	701e      	strb	r6, [r3, #0]
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	d004      	beq.n	8004ad6 <__swbuf_r+0x62>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	07db      	lsls	r3, r3, #31
 8004ad0:	d506      	bpl.n	8004ae0 <__swbuf_r+0x6c>
 8004ad2:	2e0a      	cmp	r6, #10
 8004ad4:	d104      	bne.n	8004ae0 <__swbuf_r+0x6c>
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 f923 	bl	8004d24 <_fflush_r>
 8004ade:	b988      	cbnz	r0, 8004b04 <__swbuf_r+0x90>
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <__swbuf_r+0x9c>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	d101      	bne.n	8004aee <__swbuf_r+0x7a>
 8004aea:	68ac      	ldr	r4, [r5, #8]
 8004aec:	e7cf      	b.n	8004a8e <__swbuf_r+0x1a>
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <__swbuf_r+0xa0>)
 8004af0:	429c      	cmp	r4, r3
 8004af2:	bf08      	it	eq
 8004af4:	68ec      	ldreq	r4, [r5, #12]
 8004af6:	e7ca      	b.n	8004a8e <__swbuf_r+0x1a>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f81a 	bl	8004b34 <__swsetup_r>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0cb      	beq.n	8004a9c <__swbuf_r+0x28>
 8004b04:	f04f 37ff 	mov.w	r7, #4294967295
 8004b08:	e7ea      	b.n	8004ae0 <__swbuf_r+0x6c>
 8004b0a:	bf00      	nop
 8004b0c:	08005624 	.word	0x08005624
 8004b10:	08005644 	.word	0x08005644
 8004b14:	08005604 	.word	0x08005604

08004b18 <__ascii_wctomb>:
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4608      	mov	r0, r1
 8004b1c:	b141      	cbz	r1, 8004b30 <__ascii_wctomb+0x18>
 8004b1e:	2aff      	cmp	r2, #255	; 0xff
 8004b20:	d904      	bls.n	8004b2c <__ascii_wctomb+0x14>
 8004b22:	228a      	movs	r2, #138	; 0x8a
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	4770      	bx	lr
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	700a      	strb	r2, [r1, #0]
 8004b30:	4770      	bx	lr
	...

08004b34 <__swsetup_r>:
 8004b34:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <__swsetup_r+0xcc>)
 8004b36:	b570      	push	{r4, r5, r6, lr}
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	b125      	cbz	r5, 8004b4a <__swsetup_r+0x16>
 8004b40:	69ab      	ldr	r3, [r5, #24]
 8004b42:	b913      	cbnz	r3, 8004b4a <__swsetup_r+0x16>
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f981 	bl	8004e4c <__sinit>
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <__swsetup_r+0xd0>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d10f      	bne.n	8004b70 <__swsetup_r+0x3c>
 8004b50:	686c      	ldr	r4, [r5, #4]
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b58:	0719      	lsls	r1, r3, #28
 8004b5a:	d42c      	bmi.n	8004bb6 <__swsetup_r+0x82>
 8004b5c:	06dd      	lsls	r5, r3, #27
 8004b5e:	d411      	bmi.n	8004b84 <__swsetup_r+0x50>
 8004b60:	2309      	movs	r3, #9
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	e03e      	b.n	8004bee <__swsetup_r+0xba>
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <__swsetup_r+0xd4>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d101      	bne.n	8004b7a <__swsetup_r+0x46>
 8004b76:	68ac      	ldr	r4, [r5, #8]
 8004b78:	e7eb      	b.n	8004b52 <__swsetup_r+0x1e>
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <__swsetup_r+0xd8>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	bf08      	it	eq
 8004b80:	68ec      	ldreq	r4, [r5, #12]
 8004b82:	e7e6      	b.n	8004b52 <__swsetup_r+0x1e>
 8004b84:	0758      	lsls	r0, r3, #29
 8004b86:	d512      	bpl.n	8004bae <__swsetup_r+0x7a>
 8004b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b8a:	b141      	cbz	r1, 8004b9e <__swsetup_r+0x6a>
 8004b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b90:	4299      	cmp	r1, r3
 8004b92:	d002      	beq.n	8004b9a <__swsetup_r+0x66>
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff fcdb 	bl	8004550 <_free_r>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ba4:	81a3      	strh	r3, [r4, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	b94b      	cbnz	r3, 8004bce <__swsetup_r+0x9a>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc4:	d003      	beq.n	8004bce <__swsetup_r+0x9a>
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 fa05 	bl	8004fd8 <__smakebuf_r>
 8004bce:	89a0      	ldrh	r0, [r4, #12]
 8004bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd4:	f010 0301 	ands.w	r3, r0, #1
 8004bd8:	d00a      	beq.n	8004bf0 <__swsetup_r+0xbc>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	6963      	ldr	r3, [r4, #20]
 8004be0:	425b      	negs	r3, r3
 8004be2:	61a3      	str	r3, [r4, #24]
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	b943      	cbnz	r3, 8004bfa <__swsetup_r+0xc6>
 8004be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bec:	d1ba      	bne.n	8004b64 <__swsetup_r+0x30>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	0781      	lsls	r1, r0, #30
 8004bf2:	bf58      	it	pl
 8004bf4:	6963      	ldrpl	r3, [r4, #20]
 8004bf6:	60a3      	str	r3, [r4, #8]
 8004bf8:	e7f4      	b.n	8004be4 <__swsetup_r+0xb0>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e7f7      	b.n	8004bee <__swsetup_r+0xba>
 8004bfe:	bf00      	nop
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	08005624 	.word	0x08005624
 8004c08:	08005644 	.word	0x08005644
 8004c0c:	08005604 	.word	0x08005604

08004c10 <abort>:
 8004c10:	2006      	movs	r0, #6
 8004c12:	b508      	push	{r3, lr}
 8004c14:	f000 fa48 	bl	80050a8 <raise>
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7fc f99b 	bl	8000f54 <_exit>
	...

08004c20 <__sflush_r>:
 8004c20:	898a      	ldrh	r2, [r1, #12]
 8004c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c24:	4605      	mov	r5, r0
 8004c26:	0710      	lsls	r0, r2, #28
 8004c28:	460c      	mov	r4, r1
 8004c2a:	d457      	bmi.n	8004cdc <__sflush_r+0xbc>
 8004c2c:	684b      	ldr	r3, [r1, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dc04      	bgt.n	8004c3c <__sflush_r+0x1c>
 8004c32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dc01      	bgt.n	8004c3c <__sflush_r+0x1c>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d0fa      	beq.n	8004c38 <__sflush_r+0x18>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c48:	682f      	ldr	r7, [r5, #0]
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	d032      	beq.n	8004cb4 <__sflush_r+0x94>
 8004c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	075a      	lsls	r2, r3, #29
 8004c54:	d505      	bpl.n	8004c62 <__sflush_r+0x42>
 8004c56:	6863      	ldr	r3, [r4, #4]
 8004c58:	1ac0      	subs	r0, r0, r3
 8004c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c5c:	b10b      	cbz	r3, 8004c62 <__sflush_r+0x42>
 8004c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c60:	1ac0      	subs	r0, r0, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	4602      	mov	r2, r0
 8004c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c68:	4628      	mov	r0, r5
 8004c6a:	6a21      	ldr	r1, [r4, #32]
 8004c6c:	47b0      	blx	r6
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	d106      	bne.n	8004c82 <__sflush_r+0x62>
 8004c74:	6829      	ldr	r1, [r5, #0]
 8004c76:	291d      	cmp	r1, #29
 8004c78:	d82c      	bhi.n	8004cd4 <__sflush_r+0xb4>
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <__sflush_r+0x100>)
 8004c7c:	40ca      	lsrs	r2, r1
 8004c7e:	07d6      	lsls	r6, r2, #31
 8004c80:	d528      	bpl.n	8004cd4 <__sflush_r+0xb4>
 8004c82:	2200      	movs	r2, #0
 8004c84:	6062      	str	r2, [r4, #4]
 8004c86:	6922      	ldr	r2, [r4, #16]
 8004c88:	04d9      	lsls	r1, r3, #19
 8004c8a:	6022      	str	r2, [r4, #0]
 8004c8c:	d504      	bpl.n	8004c98 <__sflush_r+0x78>
 8004c8e:	1c42      	adds	r2, r0, #1
 8004c90:	d101      	bne.n	8004c96 <__sflush_r+0x76>
 8004c92:	682b      	ldr	r3, [r5, #0]
 8004c94:	b903      	cbnz	r3, 8004c98 <__sflush_r+0x78>
 8004c96:	6560      	str	r0, [r4, #84]	; 0x54
 8004c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c9a:	602f      	str	r7, [r5, #0]
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d0cb      	beq.n	8004c38 <__sflush_r+0x18>
 8004ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	d002      	beq.n	8004cae <__sflush_r+0x8e>
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7ff fc51 	bl	8004550 <_free_r>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004cb2:	e7c2      	b.n	8004c3a <__sflush_r+0x1a>
 8004cb4:	6a21      	ldr	r1, [r4, #32]
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b0      	blx	r6
 8004cbc:	1c41      	adds	r1, r0, #1
 8004cbe:	d1c7      	bne.n	8004c50 <__sflush_r+0x30>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c4      	beq.n	8004c50 <__sflush_r+0x30>
 8004cc6:	2b1d      	cmp	r3, #29
 8004cc8:	d001      	beq.n	8004cce <__sflush_r+0xae>
 8004cca:	2b16      	cmp	r3, #22
 8004ccc:	d101      	bne.n	8004cd2 <__sflush_r+0xb2>
 8004cce:	602f      	str	r7, [r5, #0]
 8004cd0:	e7b2      	b.n	8004c38 <__sflush_r+0x18>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	e7ae      	b.n	8004c3a <__sflush_r+0x1a>
 8004cdc:	690f      	ldr	r7, [r1, #16]
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	d0aa      	beq.n	8004c38 <__sflush_r+0x18>
 8004ce2:	0793      	lsls	r3, r2, #30
 8004ce4:	bf18      	it	ne
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	680e      	ldr	r6, [r1, #0]
 8004cea:	bf08      	it	eq
 8004cec:	694b      	ldreq	r3, [r1, #20]
 8004cee:	1bf6      	subs	r6, r6, r7
 8004cf0:	600f      	str	r7, [r1, #0]
 8004cf2:	608b      	str	r3, [r1, #8]
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	dd9f      	ble.n	8004c38 <__sflush_r+0x18>
 8004cf8:	4633      	mov	r3, r6
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	6a21      	ldr	r1, [r4, #32]
 8004d00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004d04:	47e0      	blx	ip
 8004d06:	2800      	cmp	r0, #0
 8004d08:	dc06      	bgt.n	8004d18 <__sflush_r+0xf8>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e790      	b.n	8004c3a <__sflush_r+0x1a>
 8004d18:	4407      	add	r7, r0
 8004d1a:	1a36      	subs	r6, r6, r0
 8004d1c:	e7ea      	b.n	8004cf4 <__sflush_r+0xd4>
 8004d1e:	bf00      	nop
 8004d20:	20400001 	.word	0x20400001

08004d24 <_fflush_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	4605      	mov	r5, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	b913      	cbnz	r3, 8004d34 <_fflush_r+0x10>
 8004d2e:	2500      	movs	r5, #0
 8004d30:	4628      	mov	r0, r5
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	b118      	cbz	r0, 8004d3e <_fflush_r+0x1a>
 8004d36:	6983      	ldr	r3, [r0, #24]
 8004d38:	b90b      	cbnz	r3, 8004d3e <_fflush_r+0x1a>
 8004d3a:	f000 f887 	bl	8004e4c <__sinit>
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <_fflush_r+0x6c>)
 8004d40:	429c      	cmp	r4, r3
 8004d42:	d11b      	bne.n	8004d7c <_fflush_r+0x58>
 8004d44:	686c      	ldr	r4, [r5, #4]
 8004d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ef      	beq.n	8004d2e <_fflush_r+0xa>
 8004d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d50:	07d0      	lsls	r0, r2, #31
 8004d52:	d404      	bmi.n	8004d5e <_fflush_r+0x3a>
 8004d54:	0599      	lsls	r1, r3, #22
 8004d56:	d402      	bmi.n	8004d5e <_fflush_r+0x3a>
 8004d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d5a:	f000 f915 	bl	8004f88 <__retarget_lock_acquire_recursive>
 8004d5e:	4628      	mov	r0, r5
 8004d60:	4621      	mov	r1, r4
 8004d62:	f7ff ff5d 	bl	8004c20 <__sflush_r>
 8004d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d68:	4605      	mov	r5, r0
 8004d6a:	07da      	lsls	r2, r3, #31
 8004d6c:	d4e0      	bmi.n	8004d30 <_fflush_r+0xc>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	059b      	lsls	r3, r3, #22
 8004d72:	d4dd      	bmi.n	8004d30 <_fflush_r+0xc>
 8004d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d76:	f000 f908 	bl	8004f8a <__retarget_lock_release_recursive>
 8004d7a:	e7d9      	b.n	8004d30 <_fflush_r+0xc>
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <_fflush_r+0x70>)
 8004d7e:	429c      	cmp	r4, r3
 8004d80:	d101      	bne.n	8004d86 <_fflush_r+0x62>
 8004d82:	68ac      	ldr	r4, [r5, #8]
 8004d84:	e7df      	b.n	8004d46 <_fflush_r+0x22>
 8004d86:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <_fflush_r+0x74>)
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	bf08      	it	eq
 8004d8c:	68ec      	ldreq	r4, [r5, #12]
 8004d8e:	e7da      	b.n	8004d46 <_fflush_r+0x22>
 8004d90:	08005624 	.word	0x08005624
 8004d94:	08005644 	.word	0x08005644
 8004d98:	08005604 	.word	0x08005604

08004d9c <std>:
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	4604      	mov	r4, r0
 8004da2:	e9c0 3300 	strd	r3, r3, [r0]
 8004da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004daa:	6083      	str	r3, [r0, #8]
 8004dac:	8181      	strh	r1, [r0, #12]
 8004dae:	6643      	str	r3, [r0, #100]	; 0x64
 8004db0:	81c2      	strh	r2, [r0, #14]
 8004db2:	6183      	str	r3, [r0, #24]
 8004db4:	4619      	mov	r1, r3
 8004db6:	2208      	movs	r2, #8
 8004db8:	305c      	adds	r0, #92	; 0x5c
 8004dba:	f7fd fd29 	bl	8002810 <memset>
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <std+0x38>)
 8004dc0:	6224      	str	r4, [r4, #32]
 8004dc2:	6263      	str	r3, [r4, #36]	; 0x24
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <std+0x3c>)
 8004dc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <std+0x40>)
 8004dca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <std+0x44>)
 8004dce:	6323      	str	r3, [r4, #48]	; 0x30
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	080050e1 	.word	0x080050e1
 8004dd8:	08005103 	.word	0x08005103
 8004ddc:	0800513b 	.word	0x0800513b
 8004de0:	0800515f 	.word	0x0800515f

08004de4 <_cleanup_r>:
 8004de4:	4901      	ldr	r1, [pc, #4]	; (8004dec <_cleanup_r+0x8>)
 8004de6:	f000 b8af 	b.w	8004f48 <_fwalk_reent>
 8004dea:	bf00      	nop
 8004dec:	08004d25 	.word	0x08004d25

08004df0 <__sfmoreglue>:
 8004df0:	2268      	movs	r2, #104	; 0x68
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	1e4d      	subs	r5, r1, #1
 8004df6:	4355      	muls	r5, r2
 8004df8:	460e      	mov	r6, r1
 8004dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dfe:	f7ff fc0f 	bl	8004620 <_malloc_r>
 8004e02:	4604      	mov	r4, r0
 8004e04:	b140      	cbz	r0, 8004e18 <__sfmoreglue+0x28>
 8004e06:	2100      	movs	r1, #0
 8004e08:	e9c0 1600 	strd	r1, r6, [r0]
 8004e0c:	300c      	adds	r0, #12
 8004e0e:	60a0      	str	r0, [r4, #8]
 8004e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e14:	f7fd fcfc 	bl	8002810 <memset>
 8004e18:	4620      	mov	r0, r4
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}

08004e1c <__sfp_lock_acquire>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__sfp_lock_acquire+0x8>)
 8004e1e:	f000 b8b3 	b.w	8004f88 <__retarget_lock_acquire_recursive>
 8004e22:	bf00      	nop
 8004e24:	2000026d 	.word	0x2000026d

08004e28 <__sfp_lock_release>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__sfp_lock_release+0x8>)
 8004e2a:	f000 b8ae 	b.w	8004f8a <__retarget_lock_release_recursive>
 8004e2e:	bf00      	nop
 8004e30:	2000026d 	.word	0x2000026d

08004e34 <__sinit_lock_acquire>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__sinit_lock_acquire+0x8>)
 8004e36:	f000 b8a7 	b.w	8004f88 <__retarget_lock_acquire_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	2000026e 	.word	0x2000026e

08004e40 <__sinit_lock_release>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__sinit_lock_release+0x8>)
 8004e42:	f000 b8a2 	b.w	8004f8a <__retarget_lock_release_recursive>
 8004e46:	bf00      	nop
 8004e48:	2000026e 	.word	0x2000026e

08004e4c <__sinit>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4604      	mov	r4, r0
 8004e50:	f7ff fff0 	bl	8004e34 <__sinit_lock_acquire>
 8004e54:	69a3      	ldr	r3, [r4, #24]
 8004e56:	b11b      	cbz	r3, 8004e60 <__sinit+0x14>
 8004e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e5c:	f7ff bff0 	b.w	8004e40 <__sinit_lock_release>
 8004e60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e64:	6523      	str	r3, [r4, #80]	; 0x50
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <__sinit+0x68>)
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <__sinit+0x6c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	bf08      	it	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	4620      	mov	r0, r4
 8004e76:	bf08      	it	eq
 8004e78:	61a3      	streq	r3, [r4, #24]
 8004e7a:	f000 f81f 	bl	8004ebc <__sfp>
 8004e7e:	6060      	str	r0, [r4, #4]
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 f81b 	bl	8004ebc <__sfp>
 8004e86:	60a0      	str	r0, [r4, #8]
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 f817 	bl	8004ebc <__sfp>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2104      	movs	r1, #4
 8004e92:	60e0      	str	r0, [r4, #12]
 8004e94:	6860      	ldr	r0, [r4, #4]
 8004e96:	f7ff ff81 	bl	8004d9c <std>
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2109      	movs	r1, #9
 8004e9e:	68a0      	ldr	r0, [r4, #8]
 8004ea0:	f7ff ff7c 	bl	8004d9c <std>
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	2112      	movs	r1, #18
 8004ea8:	68e0      	ldr	r0, [r4, #12]
 8004eaa:	f7ff ff77 	bl	8004d9c <std>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61a3      	str	r3, [r4, #24]
 8004eb2:	e7d1      	b.n	8004e58 <__sinit+0xc>
 8004eb4:	08005288 	.word	0x08005288
 8004eb8:	08004de5 	.word	0x08004de5

08004ebc <__sfp>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	f7ff ffac 	bl	8004e1c <__sfp_lock_acquire>
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <__sfp+0x84>)
 8004ec6:	681e      	ldr	r6, [r3, #0]
 8004ec8:	69b3      	ldr	r3, [r6, #24]
 8004eca:	b913      	cbnz	r3, 8004ed2 <__sfp+0x16>
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f7ff ffbd 	bl	8004e4c <__sinit>
 8004ed2:	3648      	adds	r6, #72	; 0x48
 8004ed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	d503      	bpl.n	8004ee4 <__sfp+0x28>
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	b30b      	cbz	r3, 8004f24 <__sfp+0x68>
 8004ee0:	6836      	ldr	r6, [r6, #0]
 8004ee2:	e7f7      	b.n	8004ed4 <__sfp+0x18>
 8004ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ee8:	b9d5      	cbnz	r5, 8004f20 <__sfp+0x64>
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <__sfp+0x88>)
 8004eec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ef0:	60e3      	str	r3, [r4, #12]
 8004ef2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ef4:	f000 f847 	bl	8004f86 <__retarget_lock_init_recursive>
 8004ef8:	f7ff ff96 	bl	8004e28 <__sfp_lock_release>
 8004efc:	2208      	movs	r2, #8
 8004efe:	4629      	mov	r1, r5
 8004f00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f08:	6025      	str	r5, [r4, #0]
 8004f0a:	61a5      	str	r5, [r4, #24]
 8004f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f10:	f7fd fc7e 	bl	8002810 <memset>
 8004f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f20:	3468      	adds	r4, #104	; 0x68
 8004f22:	e7d9      	b.n	8004ed8 <__sfp+0x1c>
 8004f24:	2104      	movs	r1, #4
 8004f26:	4638      	mov	r0, r7
 8004f28:	f7ff ff62 	bl	8004df0 <__sfmoreglue>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	6030      	str	r0, [r6, #0]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d1d5      	bne.n	8004ee0 <__sfp+0x24>
 8004f34:	f7ff ff78 	bl	8004e28 <__sfp_lock_release>
 8004f38:	230c      	movs	r3, #12
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	e7ee      	b.n	8004f1c <__sfp+0x60>
 8004f3e:	bf00      	nop
 8004f40:	08005288 	.word	0x08005288
 8004f44:	ffff0001 	.word	0xffff0001

08004f48 <_fwalk_reent>:
 8004f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	4688      	mov	r8, r1
 8004f50:	2700      	movs	r7, #0
 8004f52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f5e:	d505      	bpl.n	8004f6c <_fwalk_reent+0x24>
 8004f60:	6824      	ldr	r4, [r4, #0]
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	d1f7      	bne.n	8004f56 <_fwalk_reent+0xe>
 8004f66:	4638      	mov	r0, r7
 8004f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6c:	89ab      	ldrh	r3, [r5, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d907      	bls.n	8004f82 <_fwalk_reent+0x3a>
 8004f72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f76:	3301      	adds	r3, #1
 8004f78:	d003      	beq.n	8004f82 <_fwalk_reent+0x3a>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	47c0      	blx	r8
 8004f80:	4307      	orrs	r7, r0
 8004f82:	3568      	adds	r5, #104	; 0x68
 8004f84:	e7e9      	b.n	8004f5a <_fwalk_reent+0x12>

08004f86 <__retarget_lock_init_recursive>:
 8004f86:	4770      	bx	lr

08004f88 <__retarget_lock_acquire_recursive>:
 8004f88:	4770      	bx	lr

08004f8a <__retarget_lock_release_recursive>:
 8004f8a:	4770      	bx	lr

08004f8c <__swhatbuf_r>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	460e      	mov	r6, r1
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	4614      	mov	r4, r2
 8004f96:	2900      	cmp	r1, #0
 8004f98:	461d      	mov	r5, r3
 8004f9a:	b096      	sub	sp, #88	; 0x58
 8004f9c:	da08      	bge.n	8004fb0 <__swhatbuf_r+0x24>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	061a      	lsls	r2, r3, #24
 8004fa8:	d410      	bmi.n	8004fcc <__swhatbuf_r+0x40>
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	e00e      	b.n	8004fce <__swhatbuf_r+0x42>
 8004fb0:	466a      	mov	r2, sp
 8004fb2:	f000 f8fb 	bl	80051ac <_fstat_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dbf1      	blt.n	8004f9e <__swhatbuf_r+0x12>
 8004fba:	9a01      	ldr	r2, [sp, #4]
 8004fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fc4:	425a      	negs	r2, r3
 8004fc6:	415a      	adcs	r2, r3
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	e7ee      	b.n	8004faa <__swhatbuf_r+0x1e>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	2000      	movs	r0, #0
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	b016      	add	sp, #88	; 0x58
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd8 <__smakebuf_r>:
 8004fd8:	898b      	ldrh	r3, [r1, #12]
 8004fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fdc:	079d      	lsls	r5, r3, #30
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	d507      	bpl.n	8004ff4 <__smakebuf_r+0x1c>
 8004fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	2301      	movs	r3, #1
 8004fee:	6163      	str	r3, [r4, #20]
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	466a      	mov	r2, sp
 8004ff6:	ab01      	add	r3, sp, #4
 8004ff8:	f7ff ffc8 	bl	8004f8c <__swhatbuf_r>
 8004ffc:	9900      	ldr	r1, [sp, #0]
 8004ffe:	4605      	mov	r5, r0
 8005000:	4630      	mov	r0, r6
 8005002:	f7ff fb0d 	bl	8004620 <_malloc_r>
 8005006:	b948      	cbnz	r0, 800501c <__smakebuf_r+0x44>
 8005008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500c:	059a      	lsls	r2, r3, #22
 800500e:	d4ef      	bmi.n	8004ff0 <__smakebuf_r+0x18>
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	81a3      	strh	r3, [r4, #12]
 800501a:	e7e3      	b.n	8004fe4 <__smakebuf_r+0xc>
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <__smakebuf_r+0x7c>)
 800501e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	6020      	str	r0, [r4, #0]
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	9b00      	ldr	r3, [sp, #0]
 800502c:	6120      	str	r0, [r4, #16]
 800502e:	6163      	str	r3, [r4, #20]
 8005030:	9b01      	ldr	r3, [sp, #4]
 8005032:	b15b      	cbz	r3, 800504c <__smakebuf_r+0x74>
 8005034:	4630      	mov	r0, r6
 8005036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800503a:	f000 f8c9 	bl	80051d0 <_isatty_r>
 800503e:	b128      	cbz	r0, 800504c <__smakebuf_r+0x74>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	89a0      	ldrh	r0, [r4, #12]
 800504e:	4305      	orrs	r5, r0
 8005050:	81a5      	strh	r5, [r4, #12]
 8005052:	e7cd      	b.n	8004ff0 <__smakebuf_r+0x18>
 8005054:	08004de5 	.word	0x08004de5

08005058 <_raise_r>:
 8005058:	291f      	cmp	r1, #31
 800505a:	b538      	push	{r3, r4, r5, lr}
 800505c:	4604      	mov	r4, r0
 800505e:	460d      	mov	r5, r1
 8005060:	d904      	bls.n	800506c <_raise_r+0x14>
 8005062:	2316      	movs	r3, #22
 8005064:	6003      	str	r3, [r0, #0]
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800506e:	b112      	cbz	r2, 8005076 <_raise_r+0x1e>
 8005070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005074:	b94b      	cbnz	r3, 800508a <_raise_r+0x32>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f830 	bl	80050dc <_getpid_r>
 800507c:	462a      	mov	r2, r5
 800507e:	4601      	mov	r1, r0
 8005080:	4620      	mov	r0, r4
 8005082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005086:	f000 b817 	b.w	80050b8 <_kill_r>
 800508a:	2b01      	cmp	r3, #1
 800508c:	d00a      	beq.n	80050a4 <_raise_r+0x4c>
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	d103      	bne.n	800509a <_raise_r+0x42>
 8005092:	2316      	movs	r3, #22
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	2001      	movs	r0, #1
 8005098:	e7e7      	b.n	800506a <_raise_r+0x12>
 800509a:	2400      	movs	r4, #0
 800509c:	4628      	mov	r0, r5
 800509e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050a2:	4798      	blx	r3
 80050a4:	2000      	movs	r0, #0
 80050a6:	e7e0      	b.n	800506a <_raise_r+0x12>

080050a8 <raise>:
 80050a8:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <raise+0xc>)
 80050aa:	4601      	mov	r1, r0
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	f7ff bfd3 	b.w	8005058 <_raise_r>
 80050b2:	bf00      	nop
 80050b4:	2000000c 	.word	0x2000000c

080050b8 <_kill_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	2300      	movs	r3, #0
 80050bc:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_kill_r+0x20>)
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	f7fb ff35 	bl	8000f34 <_kill>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d102      	bne.n	80050d4 <_kill_r+0x1c>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	b103      	cbz	r3, 80050d4 <_kill_r+0x1c>
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	20000268 	.word	0x20000268

080050dc <_getpid_r>:
 80050dc:	f7fb bf23 	b.w	8000f26 <_getpid>

080050e0 <__sread>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	460c      	mov	r4, r1
 80050e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e8:	f000 f894 	bl	8005214 <_read_r>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	bfab      	itete	ge
 80050f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050f2:	89a3      	ldrhlt	r3, [r4, #12]
 80050f4:	181b      	addge	r3, r3, r0
 80050f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050fa:	bfac      	ite	ge
 80050fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80050fe:	81a3      	strhlt	r3, [r4, #12]
 8005100:	bd10      	pop	{r4, pc}

08005102 <__swrite>:
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	461f      	mov	r7, r3
 8005108:	898b      	ldrh	r3, [r1, #12]
 800510a:	4605      	mov	r5, r0
 800510c:	05db      	lsls	r3, r3, #23
 800510e:	460c      	mov	r4, r1
 8005110:	4616      	mov	r6, r2
 8005112:	d505      	bpl.n	8005120 <__swrite+0x1e>
 8005114:	2302      	movs	r3, #2
 8005116:	2200      	movs	r2, #0
 8005118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511c:	f000 f868 	bl	80051f0 <_lseek_r>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	4632      	mov	r2, r6
 8005124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	4628      	mov	r0, r5
 800512c:	463b      	mov	r3, r7
 800512e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005136:	f000 b817 	b.w	8005168 <_write_r>

0800513a <__sseek>:
 800513a:	b510      	push	{r4, lr}
 800513c:	460c      	mov	r4, r1
 800513e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005142:	f000 f855 	bl	80051f0 <_lseek_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	bf15      	itete	ne
 800514c:	6560      	strne	r0, [r4, #84]	; 0x54
 800514e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005156:	81a3      	strheq	r3, [r4, #12]
 8005158:	bf18      	it	ne
 800515a:	81a3      	strhne	r3, [r4, #12]
 800515c:	bd10      	pop	{r4, pc}

0800515e <__sclose>:
 800515e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005162:	f000 b813 	b.w	800518c <_close_r>
	...

08005168 <_write_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	2200      	movs	r2, #0
 8005172:	4d05      	ldr	r5, [pc, #20]	; (8005188 <_write_r+0x20>)
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fb ff13 	bl	8000fa2 <_write>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_write_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_write_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	20000268 	.word	0x20000268

0800518c <_close_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	2300      	movs	r3, #0
 8005190:	4d05      	ldr	r5, [pc, #20]	; (80051a8 <_close_r+0x1c>)
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb ff1f 	bl	8000fda <_close>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_close_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_close_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000268 	.word	0x20000268

080051ac <_fstat_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	2300      	movs	r3, #0
 80051b0:	4d06      	ldr	r5, [pc, #24]	; (80051cc <_fstat_r+0x20>)
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	f7fb ff19 	bl	8000ff0 <_fstat>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	d102      	bne.n	80051c8 <_fstat_r+0x1c>
 80051c2:	682b      	ldr	r3, [r5, #0]
 80051c4:	b103      	cbz	r3, 80051c8 <_fstat_r+0x1c>
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	bd38      	pop	{r3, r4, r5, pc}
 80051ca:	bf00      	nop
 80051cc:	20000268 	.word	0x20000268

080051d0 <_isatty_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	2300      	movs	r3, #0
 80051d4:	4d05      	ldr	r5, [pc, #20]	; (80051ec <_isatty_r+0x1c>)
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fb ff17 	bl	800100e <_isatty>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_isatty_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_isatty_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000268 	.word	0x20000268

080051f0 <_lseek_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	2200      	movs	r2, #0
 80051fa:	4d05      	ldr	r5, [pc, #20]	; (8005210 <_lseek_r+0x20>)
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fb ff0f 	bl	8001022 <_lseek>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_lseek_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_lseek_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	20000268 	.word	0x20000268

08005214 <_read_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	4611      	mov	r1, r2
 800521c:	2200      	movs	r2, #0
 800521e:	4d05      	ldr	r5, [pc, #20]	; (8005234 <_read_r+0x20>)
 8005220:	602a      	str	r2, [r5, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	f7fb fea0 	bl	8000f68 <_read>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_read_r+0x1e>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_read_r+0x1e>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20000268 	.word	0x20000268

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
